package templates

import (
	"fmt"
	"gorant/posts"
	"gorant/users"
)

templ Post(message string, post posts.Post, comments []posts.JoinComment, postID string, highlight string) {
	@Base("GoRant - Post") {
		<main class="grid w-full max-w-[1600px] content-center justify-items-center gap-4 space-y-4 lg:grid-cols-3">
			<div class="w-full space-y-8 justify-self-start lg:col-span-3">
				<div class="flex flex-wrap items-center">
					<div class="me-4">
						@MoodMapper(post.PostID, post.UserID, post.Mood)
					</div>
					<div class="grow space-y-2">
						<h1 class="text-5xl font-extrabold capitalize">{ postID }</h1>
						<div class="flex items-center" id="post-description">
							if post.UserID == GetCurrentUser(ctx) {
								<button id="post-description-static" class="flex flex-wrap items-center">
									if post.Description == "" {
										Add a description here
									} else {
										{ post.Description }
									}
									<svg xmlns="http://www.w3.org/2000/svg" class="ms-4" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path></svg>
								</button>
								<form id="post-description-form" class="join hidden w-full" hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/description/edit", postID))) } hx-target="#post-description" hx-swap="outerHTML">
									<label class="input join-item input-bordered flex w-full max-w-xl items-center rounded-3xl">
										<svg xmlns="http://www.w3.org/2000/svg" class="me-4 inline text-neutral/30" width="1.4em" height="1.4em" viewBox="0 0 24 24"><path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path></svg>
										<input
											type="text"
											id="post-description-input"
											name="post-description-input"
											class="grow"
											if post.Description == "" {
												placeholder="Add a description here"
											}
											value={ post.Description }
										/>
										<button type="button" id="post-description-cancel" class="text-accent">
											<svg xmlns="http://www.w3.org/2000/svg" width="1.4em" height="1.4em" viewBox="0 0 24 24"><path fill="currentColor" d="m8.4 17l3.6-3.6l3.6 3.6l1.4-1.4l-3.6-3.6L17 8.4L15.6 7L12 10.6L8.4 7L7 8.4l3.6 3.6L7 15.6zm3.6 5q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
										</button>
									</label>
									<button id="post-description-button" class="btn btn-accent join-item rounded-3xl px-6">Save</button>
								</form>
							} else {
								if post.Description == "" {
								} else {
									{ post.Description }
								}
							}
						</div>
					</div>
				</div>
				<div class="flex flex-wrap space-x-2">
					if post.UserID == GetCurrentUser(ctx) {
						<details id="more-actions-dropdown" class="dropdown-start dropdown">
							<summary class="btn btn-outline btn-accent btn-sm flex items-center justify-center rounded-lg focus:bg-accent focus:text-accent-content">
								<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="inline-block h-6 w-6" viewBox="0 0 24 24"><path fill="currentColor" d="m9.25 22l-.4-3.2q-.325-.125-.612-.3t-.563-.375L4.7 19.375l-2.75-4.75l2.575-1.95Q4.5 12.5 4.5 12.338v-.675q0-.163.025-.338L1.95 9.375l2.75-4.75l2.975 1.25q.275-.2.575-.375t.6-.3l.4-3.2h5.5l.4 3.2q.325.125.613.3t.562.375l2.975-1.25l2.75 4.75l-2.575 1.95q.025.175.025.338v.674q0 .163-.05.338l2.575 1.95l-2.75 4.75l-2.95-1.25q-.275.2-.575.375t-.6.3l-.4 3.2zm2.8-6.5q1.45 0 2.475-1.025T15.55 12t-1.025-2.475T12.05 8.5q-1.475 0-2.488 1.025T8.55 12t1.013 2.475T12.05 15.5"></path></svg>
							</summary>
							<ul class="menu dropdown-content z-[1] w-64 max-w-96 rounded-box border border-neutral/30 bg-base-100 p-2 shadow-lg">
								<li class="flex rounded-md hover:bg-accent hover:text-accent-content focus:text-accent-content active:text-accent-content">
									<button id="more-actions-edit-button" class="flex h-full w-full">
										<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
											<path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path>
										</svg>Add & Edit Description
									</button>
								</li>
								<li class="flex rounded-md hover:bg-accent hover:text-accent-content focus:text-accent-content active:text-accent-content">
									<button id="more-actions-copy-button" class="flex h-full w-full" data-post-id={ "post-" + postID }>
										<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
											<path fill="currentColor" d="M9 18q-.825 0-1.412-.587T7 16V4q0-.825.588-1.412T9 2h9q.825 0 1.413.588T20 4v12q0 .825-.587 1.413T18 18zm0-2h9V4H9zm-4 6q-.825 0-1.412-.587T3 20V7q0-.425.288-.712T4 6t.713.288T5 7v13h10q.425 0 .713.288T16 21t-.288.713T15 22zm4-6V4z"></path>
										</svg>Copy Link to Post
									</button>
								</li>
								<form method="post" action={ templ.URL(fmt.Sprintf("/posts/%s/delete", post.PostID)) }>
									<li class="rounded-md text-error hover:bg-error hover:text-error-content focus:text-error-content active:text-error-content">
										<button class="flex">
											<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
												<path fill="currentColor" d="M9 17h2V8H9zm4 0h2V8h-2zm-8 4V6H4V4h5V3h6v1h5v2h-1v15z"></path>
											</svg>Delete This Post
										</button>
									</li>
								</form>
							</ul>
						</details>
					}
					<label class="input input-sm input-bordered input-accent flex w-96 max-w-full items-center gap-2">
						<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" viewBox="0 0 24 24"><path fill="currentColor" d="M11 18q-.425 0-.712-.288T10 17t.288-.712T11 16h2q.425 0 .713.288T14 17t-.288.713T13 18zm-4-5q-.425 0-.712-.288T6 12t.288-.712T7 11h10q.425 0 .713.288T18 12t-.288.713T17 13zM4 8q-.425 0-.712-.288T3 7t.288-.712T4 6h16q.425 0 .713.288T21 7t-.288.713T20 8z"></path></svg>
						<input
							id="filter-input"
							type="text"
							name="query"
							class="grow text-accent"
							placeholder="Type something to filter"
							hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/filter", postID))) }
							hx-target="#posts"
							hx-swap="outerHTML"
							hx-trigger="keyup[target.value.length > 1 || target.value.length == 0] changed delay:0.7s"
							hx-indicator="#filter-loading"
						/>
						<span id="filter-loading" class="htmx-indicator loading-accent loading loading-spinner loading-sm"></span>
						<button
							id="filter-cancel-button"
							type="button"
							class="hidden text-accent"
							hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/filter", postID))) }
							hx-target="#posts"
							hx-swap="outerHTML"
							onclick="clearFilterInput()"
						>
							<svg xmlns="http://www.w3.org/2000/svg" width="1.4em" height="1.4em" viewBox="0 0 24 24"><path fill="currentColor" d="m8.4 17l3.6-3.6l3.6 3.6l1.4-1.4l-3.6-3.6L17 8.4L15.6 7L12 10.6L8.4 7L7 8.4l3.6 3.6L7 15.6zm3.6 5q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
						</button>
					</label>
					<button type="button" class="btn btn-outline btn-accent btn-sm flex items-center"><svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="ci-sort-ascending" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 17h6m-6-5h9m5-1v8m0 0l3-3m-3 3l-3-3M4 7h12"></path></svg>Sort</button>
				</div>
			</div>
			<script>
				(function activateDescriptionForm() {
					document.getElementById("post-description-static").addEventListener("click", () => {
						const postDescriptionForm = document.getElementById("post-description-form")
						postDescriptionForm.classList.remove("hidden")
						const postDescriptionStatic = document.getElementById("post-description-static")
						postDescriptionStatic.classList.add("hidden")
					})
					document.getElementById("post-description-cancel").addEventListener("click", () => {
						const postDescriptionForm = document.getElementById("post-description-form")
						postDescriptionForm.classList.add("hidden")
						const postDescriptionStatic = document.getElementById("post-description-static")
						postDescriptionStatic.classList.remove("hidden")
					})
					document.getElementById("more-actions-edit-button").addEventListener("click", () => {
						const postDescriptionForm = document.getElementById("post-description-form")
						postDescriptionForm.classList.remove("hidden")
						const postDescriptionStatic = document.getElementById("post-description-static")
						postDescriptionStatic.classList.add("hidden")
					})
				})();

				(function() {
					document.addEventListener("click", (evt) => {
						if (evt.target.id !== "more-actions-dropdown" && document.getElementById("more-actions-dropdown").open) {
							document.getElementById("more-actions-dropdown").open = false
						}
					})
				})();

				(function copyPostLink(){
					const moreActionsCopyButton = document.getElementById("more-actions-copy-button")
					const postId = moreActionsCopyButton.dataset.postId.slice(5)
					moreActionsCopyButton.addEventListener("click", (evt) => {
						navigator.clipboard.writeText(window.location.href)	
					})
				})();

				(function() {
					//showFilterCancelButton
					document.getElementById("filter-input").addEventListener("keyup", (evt) => {
						if (evt.target.value.length > 0) {
							document.getElementById("filter-cancel-button").classList.remove("hidden")
						} else if (evt.target.value.length === 0) {
							document.getElementById("filter-cancel-button").classList.add("hidden")
						} 
					})
				})()

				function clearFilterInput() {
					document.getElementById("filter-input").value = ""
				}
			</script>
			@PartialPostNew(comments, postID, highlight)
			<div class="relative w-full">
				<div class="sticky top-2 grid justify-items-center">
					<div class="w-full" id="form-message">
						if GetCurrentUser(ctx) == "" {
							<div class="w-full pb-4" id="">
								<div class="flex items-center rounded-lg border border-neutral/20 p-4 text-neutral/80">
									<a href="/auth/login" class="flex items-center">
										<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="M11 17h2v-6h-2zm1-8q.425 0 .713-.288T13 8t-.288-.712T12 7t-.712.288T11 8t.288.713T12 9m0 13q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
										You'll need to be logged in to post.
									</a>
								</div>
							</div>
						}
					</div>
					@PostForm(postID, "false")
				</div>
			</div>
		</main>
	}
}

templ PostForm(postID string, oobSwap string) {
	<form
		method="post"
		id="comment-form"
		hx-post={ "/posts/" + postID + "/new" }
		if oobSwap == "true" {
			hx-swap-oob="true"
		}
		hx-swap="outerHTML"
		hx-target="#posts"
		class="w-full space-y-4 rounded-lg border border-neutral/20 p-4 shadow-lg lg:max-w-2xl"
	>
		<h2 class="text-xl font-bold">Add Comment</h2>
		<label class="form-control">
			<div class="label flex">
				<div class="label-text grow">Message</div>
				<div class="text-xs italic"><span id="form-message-chars-remaining"></span> characters left</div>
			</div>
			<textarea name="message" id="comment-form-message-input" placeholder="Enter a message of at least 10 chars" class="textarea textarea-bordered min-h-24" minlength="10" maxlength="2000" rows="7" required></textarea>
			<div id="form-message-error"></div>
		</label>
		<div>
			if GetCurrentUser(ctx) != "" {
				<button id="comment-submit-button" class="btn btn-accent w-full rounded-3xl text-lg" style="view-transition-name: add-post-button;">Add Comment</button>
			} else {
				<button id="comment-submit-button" class="btn btn-accent w-full rounded-3xl text-lg" style="view-transition-name: add-post-button;" disabled>Add Comment</button>
			}
		</div>
		<script src="/static/js/output/comment-form.js"></script>
	</form>
}

templ MoodMapper(postID string, postUserID string, mood string) {
	if postUserID == GetCurrentUser(ctx) {
		<div id="mood" class="dropdown-start dropdown dropdown-bottom">
			<div tabindex="0" role="button" class="flex items-center text-5xl">
				if mood == "elated" {
					😄
				} else if mood == "happy" {
					🙂
				} else if mood == "sad" {
					☹️
				} else if mood == "upset" {
					😫
				} else if mood == "angry" {
					😡
				} else {
					😐
				}
				<svg xmlns="http://www.w3.org/2000/svg" width="0.5em" height="0.5em" viewBox="0 0 24 24"><path fill="currentColor" d="m12 15.4l-6-6L7.4 8l4.6 4.6L16.6 8L18 9.4z"></path></svg>
			</div>
			<ul tabindex="0" class="menu dropdown-content z-[1] w-auto bg-base-100 p-2 shadow">
				<li class="text-base font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/elated", postID))) }
					><span class="me-2 inline text-xl">😄</span> Elated</button>
				</li>
				<li class="text-base font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/happy", postID))) }
					><span class="me-2 inline text-xl">🙂</span> Happy</button>
				</li>
				<li class="text-base font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/neutral", postID))) }
					><span class="me-2 inline text-xl">😐</span> Neutral</button>
				</li>
				<li class="text-base font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/sad", postID))) }
					><span class="me-2 inline text-xl">☹️</span> Sad</button>
				</li>
				<li class="text-base font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/upset", postID))) }
					><span class="me-2 inline text-xl">😫</span> Upset</button>
				</li>
				<li class="text-base font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/angry", postID))) }
					><span class="me-2 inline text-xl">😡</span> Angry</button>
				</li>
			</ul>
		</div>
	} else {
		<div id="mood" class="flex items-center text-5xl">
			if mood == "elated" {
				😄
			} else if mood == "happy" {
				🙂
			} else if mood == "sad" {
				☹️
			} else if mood == "upset" {
				😫
			} else if mood == "angry" {
				😡
			} else {
				😐
			}
		</div>
	}
}

templ Settings(s users.User) {
	@Base("User Settings") {
		<main class="grid w-full max-w-[1600px] content-center justify-items-center gap-8 space-y-8">
			<div class="space-y-4">
				<div id="settings-message" class="hidden"></div>
				<div class="space-y-8 rounded-lg border border-neutral/30 p-8 shadow-lg">
					<h1 class="min-w-96 justify-self-center text-5xl font-extrabold">Settings</h1>
					<form method="post" class="grid gap-4" hx-post="/settings/edit" hx-target="#settings-message" hx-swap="outerHTML" id="settings-form">
						// action="/settings/edit" 
						<label class="form-control">
							<div class="label">
								<span class="label-text">Email</span>
							</div>
							<input type="text" name="username" value={ GetCurrentUser(ctx) } class="input input-bordered w-full" disabled/>
						</label>
						<label class="form-control w-full">
							<div class="label">
								<span class="label-text">Display Name</span>
							</div>
							<input type="text" name="preferred-name" value={ s.PreferredName } class="input input-bordered w-full"/>
						</label>
						<div class="form-control">
							<label class="label cursor-pointer">
								<span class="label-text me-4">Only send me essential emails.</span>
								<input
									name="contact-me"
									type="checkbox"
									if s.ContactMeString == "0" {
										checked="checked"
									}
									class="checkbox-accent checkbox"
								/>
							</label>
						</div>
						<button class="btn btn-accent mt-4 w-full rounded-3xl text-lg">Save</button>
						<div class="text-center text-sm underline hover:text-accent"><a href="/">Back to main page</a></div>
					</form>
				</div>
			</div>
		</main>
	}
}

templ SettingsFirstLogin(s users.User) {
	@Base("User Settings") {
		<main class="grid w-full max-w-[1600px] content-center justify-items-center gap-8 space-y-8">
			<div class="space-y-4">
				<div id="settings-message" class="flex w-full items-center rounded-lg border border-success bg-info p-2 text-info-content shadow-lg">
					<h2 class="flex flex-wrap items-center px-2">
						<svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="m10.95 18l5.65-5.65l-1.45-1.45l-4.225 4.225l-2.1-2.1L7.4 14.45zM6 22q-.825 0-1.412-.587T4 20V4q0-.825.588-1.412T6 2h8l6 6v12q0 .825-.587 1.413T18 22zm7-13h5l-5-5z"></path></svg>
						Welcome! How about setting a display name below?
					</h2>
				</div>
				<div class="space-y-8 rounded-lg border border-neutral/30 p-8 shadow-lg">
					<h1 class="min-w-96 justify-self-center text-5xl font-extrabold">Settings</h1>
					<form method="post" class="grid gap-4" hx-post="/settings/edit" hx-target="#settings-message" hx-swap="outerHTML" id="settings-form">
						// action="/settings/edit" 
						<label class="form-control">
							<div class="label">
								<span class="label-text">Email</span>
							</div>
							<input type="text" name="username" value={ GetCurrentUser(ctx) } class="input input-bordered w-full" disabled/>
						</label>
						<label class="form-control w-full">
							<div class="label">
								<span class="label-text font-bold text-info">Display Name</span>
							</div>
							<input id="preferred-name-input" type="text" name="preferred-name" value={ s.PreferredName } class="input input-bordered input-info w-full"/>
						</label>
						<div class="form-control">
							<label class="label cursor-pointer">
								<span class="label-text me-4">Only send me essential emails.</span>
								<input
									name="contact-me"
									type="checkbox"
									if s.ContactMeString == "0" {
										checked="checked"
									}
									class="checkbox-accent checkbox"
								/>
							</label>
						</div>
						<button class="btn btn-accent mt-4 w-full rounded-3xl text-lg">Save</button>
						<div class="text-center text-sm underline hover:text-accent"><a href="/">Back to main page</a></div>
					</form>
				</div>
			</div>
			<script>
				(function(){
					document.getElementById("preferred-name-input").focus()
				}())
			</script>
		</main>
	}
}
