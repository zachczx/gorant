package templates

import (
	"fmt"
	"gorant/posts"
	"gorant/users"
)

templ Post(currentUser *users.User, message string, post posts.Post, related posts.PostCollection, comments []posts.Comment, highlight string, sortComments string) {
	@Base("Grumplr - Post", currentUser) {
		<div class="grid w-full content-start justify-items-center gap-y-4 lg:max-w-[1600px] lg:grid-cols-5">
			<aside class="sidebar-min-h-offset grid w-full">
				@PostSidebar(related)
			</aside>
			<div class="h-full w-full lg:col-span-4">
				<!-- title -->
				<div class="grid w-full content-start px-1 pt-8 lg:px-8">
					// <div class="w-full overflow-hidden">
					// 	@MoodBar(post.Mood, "false")
					// </div>
					<div class="mb-2 grid gap-2">
						<button id="post-title-truncated" class="">
							<h2 class="line-clamp-2 max-h-[6.3rem] overflow-hidden text-start text-3xl font-extrabold capitalize">
								{ post.Title }
							</h2>
						</button>
						@ShowTags(currentUser, post)
					</div>
					<div class="flex items-center">
						<div class="flex grow items-center gap-4">
							if currentUser.UserID  != "" {
								<div class="flex items-center">
									@PartialLikePost(post.ID, post.PostStats.CurrentUserLikeString)
								</div>
								<div class="flex items-center">
									@MoodMapper(currentUser, post.ID, post.UserID, post.Mood)
								</div>
							}
						</div>
						if post.UserID == currentUser.UserID {
							<button id="delete-post-button" type="button" class="delete-post flex text-neutral/60 hover:text-error">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" width="1em" height="1em" viewBox="0 0 24 24">
									<path fill="currentColor" d="M9 17h2V8H9zm4 0h2V8h-2zm-8 4V6H4V4h5V3h6v1h5v2h-1v15z"></path>
								</svg>
							</button>
							<dialog id="delete_post_modal" class="modal">
								<div class="modal-box overflow-auto p-2">
									<form method="dialog" class="grid justify-items-end">
										<button>
											<svg xmlns="http://www.w3.org/2000/svg" width="1.5rem" height="1.5rem" class="material-symbols:close text-base-content/70" viewBox="0 0 24 24">
												<path fill="currentColor" d="M6.4 19L5 17.6l5.6-5.6L5 6.4L6.4 5l5.6 5.6L17.6 5L19 6.4L13.4 12l5.6 5.6l-1.4 1.4l-5.6-5.6z"></path>
											</svg>
										</button>
									</form>
									<div class="grid max-w-[1600px] justify-items-center gap-8 p-4 text-base">
										<svg xmlns="http://www.w3.org/2000/svg" width="4em" height="4em" class="material-symbols:cancel h-24 w-24 text-error" viewBox="0 0 24 24">
											<path fill="currentColor" d="m8.4 17l3.6-3.6l3.6 3.6l1.4-1.4l-3.6-3.6L17 8.4L15.6 7L12 10.6L8.4 7L7 8.4l3.6 3.6L7 15.6zm3.6 5q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path>
										</svg>
										<h3 class="text-3xl font-bold">Confirm Deletion</h3>
										<p class="">This action cannot be undone. Do you wish to continue?</p>
										<div class="grid w-full gap-2">
											<form method="post" action={ templ.URL(fmt.Sprintf("/posts/%s/delete", post.ID)) }>
												<button class="delete-post btn btn-error w-full">
													Delete
												</button>
											</form>
											<form method="dialog">
												<button class="btn btn-outline btn-neutral w-full">Close</button>
											</form>
										</div>
									</div>
								</div>
							</dialog>
						}
					</div>
				</div>
				<!-- content -->
				<div class="grid w-full px-1 py-8 lg:px-8" hx-ext="response-targets">
					<div class="rounded-xl border border-neutral/10 bg-primary/10 p-4">
						@PostForm(currentUser, post.ID, "false")
						<script src="/static/js/output/post-form.js" defer></script>
					</div>
				</div>
				<form
					class="mb-4 grid w-full space-x-2 px-1 lg:flex lg:px-8"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s", post.ID))) }
					hx-target="#posts"
					hx-swap="outerHTML"
					hx-indicator="#filter-loading"
					hx-trigger="keyup[target.value.length > 1 || target.value.length == 0] changed delay:0.5s, click from:#filter-clear-button"
				>
					<div class="join">
						<label class="input input-sm join-item flex w-full items-center gap-2 border-neutral/20 bg-white/70 text-accent text-neutral/70 lg:w-96">
							<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" viewBox="0 0 24 24"><path fill="currentColor" d="M11 18q-.425 0-.712-.288T10 17t.288-.712T11 16h2q.425 0 .713.288T14 17t-.288.713T13 18zm-4-5q-.425 0-.712-.288T6 12t.288-.712T7 11h10q.425 0 .713.288T18 12t-.288.713T17 13zM4 8q-.425 0-.712-.288T3 7t.288-.712T4 6h16q.425 0 .713.288T21 7t-.288.713T20 8z"></path></svg>
							<input
								id="filter-input"
								type="text"
								name="f"
								class="grow text-base-content"
								placeholder="Type something to filter"
							/>
							<button
								id="filter-clear-button"
								type="button"
								class="hidden text-neutral/70"
								hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s", post.ID))) }
								hx-target="#posts"
								hx-swap="outerHTML"
							>
								<svg xmlns="http://www.w3.org/2000/svg" width="1.4em" height="1.4em" viewBox="0 0 24 24"><path fill="currentColor" d="m8.4 17l3.6-3.6l3.6 3.6l1.4-1.4l-3.6-3.6L17 8.4L15.6 7L12 10.6L8.4 7L7 8.4l3.6 3.6L7 15.6zm3.6 5q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
							</button>
						</label>
						<button
							class="btn join-item btn-sm bg-neutral/90 text-neutral-content hover:bg-neutral/90"
							hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s", post.ID))) }
							hx-target="#posts"
							hx-swap="outerHTML"
							hx-indicator="#filter-loading"
						>Filter</button>
					</div>
					<span id="filter-loading" class="htmx-indicator loading-accent loading loading-spinner loading-sm"></span>
					<div class="flex grow justify-end">
						@SortButton(currentUser, post.ID, "false")
					</div>
				</form>
				<div class="w-full px-1 lg:px-8">
					@Comments(currentUser, comments, highlight)
				</div>
			</div>
			<script src="/static/js/output/post.js"></script>
			<div id="comment-attachment-modal" class="hidden"></div>
		</div>
	}
}

templ PostSidebar(related posts.PostCollection) {
	@Sidebar() {
		if len(related) > 0 {
			<ul class="mx-2 grid border-t border-t-neutral/20 px-4 pt-6">
				<li class="flex items-center gap-4 text-lg font-bold">
					<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="lucide-lab:venn" viewBox="0 0 24 24">
						<g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><circle cx="8" cy="12" r="6"></circle><circle cx="16" cy="12" r="6"></circle></g>
					</svg>Similar
				</li>
				for i:=0; i < len(related); i++ {
					<a href={ templ.URL(fmt.Sprintf("/posts/%s", related[i].ID)) } class="inline-block py-2">
						<h3 class="leading-tighter line-clamp-2 hyphens-auto break-words text-sm hover:underline">{ related[i].Title }</h3>
						// <div class="mt-2 text-sm text-base-content/60">{ related[i].CreatedAt.Process() }</div>
						<div class="mt-1 flex items-center gap-x-8 text-xs">
							// <div class="flex items-center gap-x-1">
							// 	if len(related[i].Tags.Tags) == 0 {
							// 		<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="mdi:tag text-neutral/70" viewBox="0 0 24 24">
							// 			<path fill="currentColor" d="m21.41 11.58l-9-9A2 2 0 0 0 11 2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 .59 1.42l9 9A2 2 0 0 0 13 22a2 2 0 0 0 1.41-.59l7-7A2 2 0 0 0 22 13a2 2 0 0 0-.59-1.42M13 20l-9-9V4h7l9 9M6.5 5A1.5 1.5 0 1 1 5 6.5A1.5 1.5 0 0 1 6.5 5"></path>
							// 		</svg>0
							// 	} else {
							// 		<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="mdi:tag me-1 text-secondary" viewBox="0 0 24 24">
							// 			<path fill="currentColor" d="M5.5 7A1.5 1.5 0 0 1 4 5.5A1.5 1.5 0 0 1 5.5 4A1.5 1.5 0 0 1 7 5.5A1.5 1.5 0 0 1 5.5 7m15.91 4.58l-9-9C12.05 2.22 11.55 2 11 2H4c-1.11 0-2 .89-2 2v7c0 .55.22 1.05.59 1.41l8.99 9c.37.36.87.59 1.42.59s1.05-.23 1.41-.59l7-7c.37-.36.59-.86.59-1.41c0-.56-.23-1.06-.59-1.42"></path>
							// 		</svg>len(related[i].Tags.Tags)
							// 	}
							// </div>
							<div class="flex items-center gap-x-1">
								if related[i].PostStats.LikesCountString() == "0" {
									<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="text-neutral/60" viewBox="0 0 24 24">
										<path fill="currentColor" d="M12 20.325q-.35 0-.712-.125t-.638-.4l-1.725-1.575q-2.65-2.425-4.788-4.812T2 8.15Q2 5.8 3.575 4.225T7.5 2.65q1.325 0 2.5.562t2 1.538q.825-.975 2-1.537t2.5-.563q2.35 0 3.925 1.575T22 8.15q0 2.875-2.125 5.275T15.05 18.25l-1.7 1.55q-.275.275-.637.4t-.713.125M11.05 6.75q-.725-1.025-1.55-1.563t-2-.537q-1.5 0-2.5 1t-1 2.5q0 1.3.925 2.763t2.213 2.837t2.65 2.575T12 18.3q.85-.775 2.213-1.975t2.65-2.575t2.212-2.837T20 8.15q0-1.5-1-2.5t-2.5-1q-1.175 0-2 .538T12.95 6.75q-.175.25-.425.375T12 7.25t-.525-.125t-.425-.375m.95 4.725"></path>
									</svg>0
								} else {
									<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="text-error/60" viewBox="0 0 24 24">
										<path fill="currentColor" d="M12 20.325q-.35 0-.712-.125t-.638-.4l-1.725-1.575q-2.65-2.425-4.788-4.812T2 8.15Q2 5.8 3.575 4.225T7.5 2.65q1.325 0 2.5.562t2 1.538q.825-.975 2-1.537t2.5-.563q2.35 0 3.925 1.575T22 8.15q0 2.875-2.125 5.275T15.05 18.25l-1.7 1.55q-.275.275-.637.4t-.713.125"></path>
									</svg>{ related[i].PostStats.LikesCountString() }
								}
							</div>
							<div class="flex items-center gap-x-1">
								if related[i].PostStats.CommentsRepliesCountString()  == "0" {
									<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="material-symbols:chat-outline text-neutral/60" viewBox="0 0 24 24"><path fill="currentColor" d="M6 14h8v-2H6zm0-3h12V9H6zm0-3h12V6H6zM2 22V4q0-.825.588-1.412T4 2h16q.825 0 1.413.588T22 4v12q0 .825-.587 1.413T20 18H6zm3.15-6H20V4H4v13.125zM4 16V4z"></path></svg>0
								} else {
									<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="material-symbols:chat-rounded text-info/60" viewBox="0 0 24 24"><path fill="currentColor" d="M2 22V4q0-.825.588-1.412T4 2h16q.825 0 1.413.588T22 4v12q0 .825-.587 1.413T20 18H6zm4-8h8v-2H6zm0-3h12V9H6zm0-3h12V6H6z"></path></svg>{ related[i].PostStats.CommentsRepliesCountString() }
								}
								<span class="text-error"></span>
							</div>
						</div>
					</a>
				}
			</ul>
		}
	}
}

templ Sidebar() {
	<div class="grid h-full w-full grid-rows-[1fr_auto] content-start gap-8 overflow-x-auto border-l border-r border-l-neutral/15 border-r-neutral/15 px-2 lg:max-w-2xl">
		<div>
			<ul class="sidebar-menu pb-6 text-lg font-bold text-base-content/80">
				<li>
					<a href="/">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							width="1.3em"
							height="1.3em"
							class="material-symbols:house"
							viewBox="0 0 24 24"
						>
							<path fill="currentColor" d="M5 20v-9.15L2.2 13L1 11.4L12 3l4 3.05V4h3v4.35l4 3.05l-1.2 1.6l-2.8-2.15V20h-5v-6h-4v6zm5-9.975h4q0-.8-.6-1.313T12 8.2t-1.4.513t-.6 1.312"></path>
						</svg>Home
					</a>
				</li>
				<li>
					<a href="/">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							width="1.3em"
							height="1.3em"
							class="fluent:apps-list-detail-20-filled"
							viewBox="0 0 20 20"
						>
							<path fill="currentColor" d="M3.5 4A1.5 1.5 0 0 0 2 5.5v2A1.5 1.5 0 0 0 3.5 9h2A1.5 1.5 0 0 0 7 7.5v-2A1.5 1.5 0 0 0 5.5 4zm6 1a.5.5 0 0 0 0 1h8a.5.5 0 0 0 0-1zm0 2a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1zm-6 4A1.5 1.5 0 0 0 2 12.5v2A1.5 1.5 0 0 0 3.5 16h2A1.5 1.5 0 0 0 7 14.5v-2A1.5 1.5 0 0 0 5.5 11zm6 1a.5.5 0 0 0 0 1h8a.5.5 0 0 0 0-1zm0 2a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1z"></path>
						</svg>Posts
					</a>
				</li>
				<li>
					<a href="/live">
						<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="fluent:live-20-filled" viewBox="0 0 20 20">
							<path fill="currentColor" d="M5.453 4.167a.726.726 0 0 0-1.027-.01A8.23 8.23 0 0 0 2 10a8.23 8.23 0 0 0 2.604 6.015a.725.725 0 0 0 1.01-.025c.316-.316.277-.819-.027-1.11A6.73 6.73 0 0 1 3.5 10c0-1.846.741-3.52 1.943-4.738c.29-.295.32-.785.01-1.095M7.214 5.93a.714.714 0 0 0-1.008-.016A5.73 5.73 0 0 0 4.5 10c0 1.692.73 3.213 1.893 4.265a.713.713 0 0 0 .983-.038c.328-.328.267-.844-.041-1.134A4.24 4.24 0 0 1 6 10c0-1.15.457-2.194 1.2-2.96c.286-.294.333-.793.014-1.111m5.572 0a.714.714 0 0 1 1.008-.016A5.73 5.73 0 0 1 15.5 10c0 1.692-.73 3.213-1.893 4.265a.713.713 0 0 1-.983-.038c-.328-.328-.267-.844.041-1.134A4.24 4.24 0 0 0 14 10c0-1.15-.457-2.194-1.2-2.96c-.286-.294-.333-.793-.014-1.111m1.761-1.762a.726.726 0 0 1 1.027-.01A8.23 8.23 0 0 1 18 10a8.23 8.23 0 0 1-2.604 6.015a.725.725 0 0 1-1.01-.025c-.316-.316-.277-.819.028-1.11A6.73 6.73 0 0 0 16.5 10c0-1.846-.741-3.52-1.943-4.738c-.29-.295-.32-.785-.01-1.095M10 8.5a1.5 1.5 0 1 0 0 3a1.5 1.5 0 0 0 0-3"></path>
						</svg>Live
					</a>
				</li>
				<li>
					<a href="/search">
						<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="material-symbols:search-rounded" viewBox="0 0 24 24">
							<path fill="currentColor" d="M9.5 16q-2.725 0-4.612-1.888T3 9.5t1.888-4.612T9.5 3t4.613 1.888T16 9.5q0 1.1-.35 2.075T14.7 13.3l5.6 5.6q.275.275.275.7t-.275.7t-.7.275t-.7-.275l-5.6-5.6q-.75.6-1.725.95T9.5 16m0-2q1.875 0 3.188-1.312T14 9.5t-1.312-3.187T9.5 5T6.313 6.313T5 9.5t1.313 3.188T9.5 14"></path>
						</svg>Search
					</a>
				</li>
				<li>
					<a href="/settings">
						<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="" viewBox="0 0 24 24">
							<path fill="currentColor" d="M14.5 23q-.625 0-1.062-.437T13 21.5v-7q0-.625.438-1.062T14.5 13h7q.625 0 1.063.438T23 14.5v7q0 .625-.437 1.063T21.5 23zm-5.25-1l-.4-3.2q-.325-.125-.612-.3t-.563-.375L4.7 19.375l-2.75-4.75l2.575-1.95Q4.5 12.5 4.5 12.338v-.675q0-.163.025-.338L1.95 9.375l2.75-4.75l2.975 1.25q.275-.2.575-.375t.6-.3l.4-3.2h5.5l.4 3.2q.325.125.613.3t.562.375l2.975-1.25l2.75 4.75L19.925 11H15.4q-.35-1.075-1.25-1.787t-2.1-.713q-1.45 0-2.475 1.025T8.55 12q0 1.2.675 2.1T11 15.35V22zM15 21h6v-.825q-.625-.575-1.4-.875T18 19t-1.6.3t-1.4.875zm3-3q.625 0 1.063-.437T19.5 16.5t-.437-1.062T18 15t-1.062.438T16.5 16.5t.438 1.063T18 18"></path>
						</svg>Settings
					</a>
				</li>
			</ul>
			{ children... }
		</div>
		@Footer()
	</div>
}

templ Comments(currentUser *users.User, comments []posts.Comment, highlight string) {
	<article id="posts" class="grid w-full gap-2 pb-2" hx-ext="response-targets">
		// pb-2 instead of pb-4, because each reply div after the content will always trigger gap-2
		if len(comments) > 0 {
			for i := 0; i < len(comments); i++ {
				<div
					id={ "comment-" + comments[i].ID.String() }
					if comments[i].ID.String() == highlight {
						class="relative flex h-auto w-full animate-highlight-comment-main rounded-xl border border-neutral/10 transition-all duration-1000"
					} else {
						class="relative flex h-auto w-full rounded-xl border border-neutral/10 transition-all duration-1000"
					}
				>
					<div id={ "comment-delete-loader-" + comments[i].ID.String() } class="absolute left-1/2 top-1/2 z-10 hidden w-full -translate-x-1/2 -translate-y-1/2 transform justify-center opacity-100 backdrop-blur-[1px]"><span class="loading loading-spinner loading-md text-error"></span></div>
					<div
						id={ "comment-upvote-" + comments[i].ID.String() }
						class="grid content-center rounded-l-xl bg-white/70 p-2 text-center text-xl font-bold lg:w-16"
					>
						<button
							hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/upvote", comments[i].PostID, comments[i].ID.String()))) }
							hx-target="#posts"
							hx-swap="outerHTML"
							hx-target-403="#toast"
							if comments[i].CommentStats.CheckUpvoted(currentUser.UserID) {
								class="inline-block h-auto text-4xl text-secondary"
							} else {
								class="group inline-block h-auto text-4xl hover:text-secondary"
							}
						>
							<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="inline-block transition-all duration-300 ease-out active:-translate-y-5" viewBox="0 0 24 24"><path fill="currentColor" d="m7 14l5-5l5 5z"></path></svg>
						</button>
						<div>
							{ comments[i].CommentStats.CountString() }
						</div>
					</div>
					<div
						id={ "comment-body-" + comments[i].ID.String() }
						class="w-full grow rounded-r-xl bg-white/70 p-4"
					>
						<div class="flex">
							<div class="flex grow items-center">
								<div class="avatar me-4">
									<div class="w-16 rounded-full border border-neutral/20 bg-base-100">
										<img src={ string(templ.URL(comments[i].AvatarPath())) } class="scale-125" alt={ comments[i].PreferredName + "'s Avatar" }/>
									</div>
								</div>
								<div>
									<div class="text-xl font-bold">{ comments[i].PreferredName }</div>
									<div class="text-xs text-base-content/60">{ comments[i].CreatedAt.Process() }</div>
								</div>
							</div>
							<div class="flex items-center text-base">
								if comments[i].UserID == currentUser.UserID {
									<div class="dropdown dropdown-end ms-8">
										<div tabindex="0" role="button" class="flex items-center justify-center rounded-lg text-neutral/70">
											<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="material-symbols-more-horiz inline-block h-6 w-6" viewBox="0 0 24 24"><path fill="currentColor" d="M6 14q-.825 0-1.412-.587T4 12t.588-1.412T6 10t1.413.588T8 12t-.587 1.413T6 14m6 0q-.825 0-1.412-.587T10 12t.588-1.412T12 10t1.413.588T14 12t-.587 1.413T12 14m6 0q-.825 0-1.412-.587T16 12t.588-1.412T18 10t1.413.588T20 12t-.587 1.413T18 14"></path></svg>
										</div>
										<ul tabindex="0" class="menu dropdown-content z-[5] w-52 rounded-box border-2 border-accent/20 bg-primary/15 p-2 shadow-lg backdrop-blur-[40px]">
											<li
												hx-target={ "#comment-" + comments[i].ID.String() + "-content" }
												hx-swap="outerHTML"
												hx-get={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/edit", comments[i].PostID, comments[i].ID.String()))) }
												class="flex rounded-md hover:bg-accent hover:text-accent-content focus:text-accent-content active:text-accent-content"
											>
												<button class="flex">
													<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
														<path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path>
													</svg>Edit comment
												</button>
											</li>
											<li
												data-parent-comment-id={ comments[i].ID.String() }
												hx-target="#posts"
												hx-trigger="click"
												hx-swap="outerHTML swap:1s"
												hx-target-403="#toast"
												hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/delete", comments[i].PostID, comments[i].ID.String()))) }
												class="comment-delete-button rounded-md text-error hover:bg-error hover:text-error-content focus:text-error-content active:text-error-content"
											>
												<button class="flex">
													<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
														<path fill="currentColor" d="M9 17h2V8H9zm4 0h2V8h-2zm-8 4V6H4V4h5V3h6v1h5v2h-1v15z"></path>
													</svg>
													Delete comment
												</button>
											</li>
										</ul>
									</div>
								}
							</div>
						</div>
						<div id={ "comment-" + comments[i].ID.String() + "-content" } class="comment-content hyphenate whitespace-pre-line pt-4 text-base" data-comment-id={ comments[i].ID.String() }>
							{ comments[i].Content }
							<div class="mt-4 grid grid-cols-2 content-center">
								if len(comments[i].File.Key) > 0 {
									<button onClick={ commentAttachmentModal(comments[i].IDString()) } class="flex w-fit max-w-56 items-center gap-1 truncate rounded-lg border border-neutral/10 bg-neutral/5 px-2 py-0.5 text-sm font-medium text-base-content/70">
										<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="material-symbols:attach-file-rounded pointer-events-none rotate-45 text-base-content/70" viewBox="0 0 24 24">
											<path fill="currentColor" d="M18 15.75q0 2.6-1.825 4.425T11.75 22t-4.425-1.825T5.5 15.75V6.5q0-1.875 1.313-3.187T10 2t3.188 1.313T14.5 6.5v8.75q0 1.15-.8 1.95t-1.95.8t-1.95-.8t-.8-1.95V7q0-.425.288-.712T10 6t.713.288T11 7v8.25q0 .325.213.538t.537.212t.538-.213t.212-.537V6.5q-.025-1.05-.737-1.775T10 4t-1.775.725T7.5 6.5v9.25q-.025 1.775 1.225 3.013T11.75 20q1.75 0 2.975-1.237T16 15.75V7q0-.425.288-.712T17 6t.713.288T18 7z"></path>
										</svg>
										{ comments[i].File.Key }
									</button>
									// Modal for each attachment
									<dialog id={ "comment_" + comments[i].IDString() + "_attachment" } class="modal">
										<div class="modal-box min-w-[40dvw] overflow-auto p-2">
											<form method="dialog" class="grid justify-items-end">
												<button>
													<svg xmlns="http://www.w3.org/2000/svg" width="1.5rem" height="1.5rem" class="material-symbols:close text-base-content/70" viewBox="0 0 24 24">
														<path fill="currentColor" d="M6.4 19L5 17.6l5.6-5.6L5 6.4L6.4 5l5.6 5.6L17.6 5L19 6.4L13.4 12l5.6 5.6l-1.4 1.4l-5.6-5.6z"></path>
													</svg>
												</button>
											</form>
											<div class="grid max-w-[1600px] justify-items-center p-2 text-base">
												<img src={ string(templ.URL(fmt.Sprintf("%s", comments[i].FileURL()))) } alt="Uploaded image" class=""/>
												<div class="modal-action justify-self-end">
													<form method="dialog">
														<button class="btn btn-accent">Close</button>
													</form>
												</div>
											</div>
										</div>
									</dialog>
								} else {
									<div></div>
								}
								<div class="flex justify-end text-sm">
									<button class="reply-button flex items-center gap-2 text-base-content/70" data-comment-id={ comments[i].IDString() }>
										<svg xmlns="http://www.w3.org/2000/svg" width="1.3rem" height="1.3rem" class="material-symbols:reply pointer-events-none" viewBox="0 0 24 24">
											<path fill="currentColor" d="M19 19v-4q0-1.25-.875-2.125T16 12H6.825l3.6 3.6L9 17l-6-6l6-6l1.425 1.4l-3.6 3.6H16q2.075 0 3.538 1.463T21 15v4z"></path>
										</svg>Reply
									</button>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="grid gap-4">
					<div class="replies-container grid gap-2">
						<form
							id={ "comment-" + comments[i].IDString() + "-reply-form" }
							hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/reply", comments[i].PostID, comments[i].IDString()))) }
							hx-swap="outerHTML"
							hx-target="#posts"
							hx-target-error="#toast"
							class="reply-input hidden"
						>
							<label
								id={ "comment-" + comments[i].IDString() + "-reply-input" }
								class="input relative flex w-full items-center gap-2 border border-neutral/20 bg-primary/10 focus-within:outline-accent/30 focus:outline-accent/30"
							>
								<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="material-symbols:reply text-base-content/50" viewBox="0 0 24 24">
									<path fill="currentColor" d="M19 19v-4q0-1.25-.875-2.125T16 12H6.825l3.6 3.6L9 17l-6-6l6-6l1.425 1.4l-3.6 3.6H16q2.075 0 3.538 1.463T21 15v4z"></path>
								</svg>
								<input type="text" class="grow" name="message" placeholder="Reply to comment"/>
								<button class="top-1.75 absolute right-2">
									<svg xmlns="http://www.w3.org/2000/svg" width="2em" height="2em" class="material-symbols:send-rounded text-accent" viewBox="0 0 24 24">
										<path fill="currentColor" d="M4.4 19.425q-.5.2-.95-.088T3 18.5V14l8-2l-8-2V5.5q0-.55.45-.837t.95-.088l15.4 6.5q.625.275.625.925t-.625.925z"></path>
									</svg>
								</button>
							</label>
						</form>
						if len(comments[i].Replies) > 0 {
							for j := 0; j < len(comments[i].Replies); j++ {
								<div class="reply">
									@replyBody(currentUser, comments[i].Replies[j], highlight)
								</div>
							}
						}
					</div>
				</div>
			}
		} else {
			<div class="grid min-h-[50vh] content-center justify-items-center gap-4 rounded-lg p-8">
				<img src="/static/images/missing-puzzle.svg" width="363" height="400" class="h-32 w-32 lg:h-64 lg:w-64" alt="Nothing!"/>
				<div>
					<h2 class="mb-2 text-center text-2xl font-extrabold">No comments</h2>
					<p class="text-center">Be the first to comment!</p>
				</div>
			</div>
		}
		<script src="/static/js/output/post-partial.js"></script>
		<!-- Children props are for Toasts -->
		{ children... }
	</article>
}

script commentAttachmentModal(commentID string) {
	document.getElementById("comment_" + commentID + "_attachment").showModal()
}

templ SortButton(currentUser *users.User, postID string, oob string) {
	<div
		id="sort-dropdown"
		class="dropdown-start dropdown active:bg-transparent"
		hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s", postID))) }
		hx-target="#posts"
		hx-swap="outerHTML"
		hx-indicator="#filter-loading"
		hx-trigger="change"
		if oob == "true" {
			hx-swap-oob="true"
		}
	>
		<div tabindex="0" role="button" class="group btn btn-outline btn-sm flex items-center border-neutral/10 bg-white/70 text-neutral/70 hover:bg-primary/30 hover:text-primary-content focus:bg-primary/30 focus:text-primary-content active:bg-primary/30 active:text-primary-content">
			<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="ci-sort-ascending me-1" viewBox="0 0 24 24">
				<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.4" d="M4 17h6m-6-5h9m5-1v8m0 0l3-3m-3 3l-3-3M4 7h12"></path>
			</svg>
			<span class="font-bold">
				if currentUser.SortComments == "upvote;desc" {
					Upvotes (highest first)
				} else if currentUser.SortComments == "upvote;asc" {
					Upvotes (lowest first)
				} else if currentUser.SortComments == "date;desc" {
					Date (latest first)
				} else if currentUser.SortComments == "date;asc" {
					Date (oldest first)
				}
			</span>
			<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="" viewBox="0 0 24 24"><path fill="currentColor" d="m12 15.4l-6-6L7.4 8l4.6 4.6L16.6 8L18 9.4z"></path></svg>
		</div>
		<ul tabindex="0" class="menu dropdown-content z-[1] w-64 max-w-96 rounded-box border border-neutral/30 bg-white/70 p-2 shadow-lg backdrop-blur-[40px]">
			<li
				if currentUser.SortComments == "upvote;desc" {
					class="flex rounded-md bg-primary/30 text-primary-content hover:bg-primary/30 hover:text-primary-content focus:text-primary-content active:text-primary-content"
				} else {
					class="flex rounded-md hover:bg-primary/30 hover:text-primary-content focus:text-primary-content active:text-primary-content"
				}
			>
				<label class="sort-button-menu flex h-full w-full hover:bg-transparent" data-post-id={ "post-" + postID }>
					<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
						<path fill="currentColor" d="M18 21H8V8l7-7l1.25 1.25q.175.175.288.475t.112.575v.35L15.55 8H21q.8 0 1.4.6T23 10v2q0 .175-.037.375t-.113.375l-3 7.05q-.225.5-.75.85T18 21M6 8v13H2V8z"></path>
					</svg>Upvotes (highest first)
					<input type="radio" name="sort" class="hidden" value="upvote;desc"/>
				</label>
			</li>
			<li
				if currentUser.SortComments == "upvote;asc" {
					class="flex rounded-md bg-primary/30 text-primary-content hover:bg-primary/30 hover:text-primary-content focus:text-primary-content active:text-primary-content"
				} else {
					class="flex rounded-md hover:bg-primary/30 hover:text-primary-content focus:text-primary-content active:text-primary-content"
				}
			>
				<label class="sort-button-menu flex h-full w-full hover:bg-transparent" data-post-id={ "post-" + postID }>
					<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
						<path fill="currentColor" d="M6 3h10v13l-7 7l-1.25-1.25q-.175-.175-.288-.475T7.35 20.7v-.35L8.45 16H3q-.8 0-1.4-.6T1 14v-2q0-.175.037-.375t.113-.375l3-7.05q.225-.5.75-.85T6 3m12 13V3h4v13z"></path>
					</svg>Upvotes (lowest first)
					<input type="radio" name="sort" class="hidden" value="upvote;asc"/>
				</label>
			</li>
			<li
				if currentUser.SortComments == "date;desc" {
					class="flex rounded-md bg-primary/30 text-primary-content hover:bg-primary/30 hover:text-primary-content focus:text-primary-content active:text-primary-content"
				} else {
					class="flex rounded-md hover:bg-primary/30 hover:text-primary-content focus:text-primary-content active:text-primary-content"
				}
			>
				<label class="sort-button-menu flex h-full w-full hover:bg-transparent" data-post-id={ "post-" + postID }>
					<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
						<path fill="currentColor" d="M12 22q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22m0-2q3.35 0 5.675-2.325T20 12h-8V4Q8.65 4 6.325 6.325T4 12t2.325 5.675T12 20"></path>
					</svg>Date (latest first)
					<input type="radio" name="sort" class="hidden" value="date;desc"/>
				</label>
			</li>
			<li
				if currentUser.SortComments == "date;asc" {
					class="flex rounded-md bg-primary/30 text-primary-content hover:bg-primary/30 hover:text-primary-content focus:text-primary-content active:text-primary-content"
				} else {
					class="flex rounded-md hover:bg-primary/30 hover:text-primary-content focus:text-primary-content active:text-primary-content"
				}
			>
				<label class="sort-button-menu flex h-full w-full hover:bg-transparent" data-post-id={ "post-" + postID }>
					<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
						<path fill="currentColor" d="M12 22q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22M6.325 6.325L12 12V4q-1.6 0-3.075.6t-2.6 1.725"></path>
					</svg>Date (oldest first)
					<input type="radio" name="sort" class="hidden" value="date;asc"/>
				</label>
			</li>
		</ul>
	</div>
}

templ PostForm(currentUser *users.User, postID string, oobSwap string) {
	if currentUser.UserID  != "" {
		<form
			method="post"
			id="comment-form"
			hx-post={ "/posts/" + postID + "/new" }
			if oobSwap == "true" {
				hx-swap-oob="true"
			}
			hx-swap="outerHTML"
			hx-target="#posts"
			hx-trigger="keydown[key=='Enter'&&ctrlKey], click from:#comment-submit-button"
			hx-encoding="multipart/form-data"
			hx-target-error="#toast"
			class="grid gap-4"
		>
			<label class="form-control">
				<div class="relative w-full">
					<textarea
						name="message"
						id="comment-form-message-input"
						placeholder="Enter a message of at least 10 chars"
						class="textarea textarea-bordered w-full bg-white/70"
						minlength="10"
						maxlength="2000"
						rows="2"
						required
					></textarea>
					<button id="comment-submit-button" class="absolute bottom-3 right-0 rounded-lg px-2 text-lg text-accent">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							width="1.3em"
							height="1.3em"
							class="material-symbols:send-rounded"
							viewBox="0 0 24 24"
						>
							<path fill="currentColor" d="M4.4 19.425q-.5.2-.95-.088T3 18.5V14l8-2l-8-2V5.5q0-.55.45-.837t.95-.088l15.4 6.5q.625.275.625.925t-.625.925z"></path>
						</svg>
					</button>
				</div>
				<div class="grid grid-cols-2 content-center">
					<div class="flex w-full items-center gap-8">
						<button id="comment-form-attachment-button" class="flex items-center gap-1 text-sm text-base-content/60" type="button">
							<svg
								xmlns="http://www.w3.org/2000/svg"
								width="1.3em"
								height="1.3em"
								class="material-symbols:add-photo-alternate-outline pointer-events-none"
								viewBox="0 0 24 24"
							>
								<path fill="currentColor" d="M5 21q-.825 0-1.412-.587T3 19V5q0-.825.588-1.412T5 3h8v2H5v14h14v-8h2v8q0 .825-.587 1.413T19 21zm1-4h12l-3.75-5l-3 4L9 13zm11-8V7h-2V5h2V3h2v2h2v2h-2v2z"></path>
							</svg><span class="hover:text-accent">Attach</span>
						</button>
					</div>
					<div class="flex items-center justify-end gap-8">
						<div class="text-sm italic"><span id="form-message-chars"></span>/2000</div>
					</div>
				</div>
			</label>
			<div id="comment-form-attachment-accordion" class="grid hidden gap-2 text-base-content/70 transition-all duration-500">
				<label id="comment-file-input-droparea" class="grid min-h-14 cursor-pointer content-center justify-items-center rounded-lg py-4 outline-dashed outline-2 outline-base-content/30">
					<input id="comment-file-input" type="file" name="file" class="file-input file-input-bordered file-input-accent hidden w-full" accept="image/png, image/jpeg, image/webp, image/avif, image/gif, image/svg+xml"/>
					<svg xmlns="http://www.w3.org/2000/svg" width="2rem" height="2rem" class="material-symbols:upload-file" viewBox="0 0 24 24"><path fill="currentColor" d="M11 19h2v-4.175l1.6 1.6L16 15l-4-4l-4 4l1.425 1.4L11 14.825zm-5 3q-.825 0-1.412-.587T4 20V4q0-.825.588-1.412T6 2h8l6 6v12q0 .825-.587 1.413T18 22zm7-13h5l-5-5z"></path></svg>
					<div id="comment-file-message" class="break-all px-2 text-base font-medium"><b>Select</b> or <b>Drag a file</b> to upload</div>
				</label>
				<div class="text-xs">Allowed: .jpg, .gif, .png, .webp, .avif</div>
			</div>
			<div id="comment-form-error-message" class="hidden text-sm text-error"></div>
		</form>
	} else {
		<div id="form-message-error">
			<div class="my-4 flex items-center justify-center text-accent">
				<a href="/login" class="flex items-center justify-center">
					<svg xmlns="http://www.w3.org/2000/svg" width="2em" height="2em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="M6 22q-.825 0-1.412-.587T4 20V10q0-.825.588-1.412T6 8h1V6q0-2.075 1.463-3.537T12 1t3.538 1.463T17 6v2h1q.825 0 1.413.588T20 10v10q0 .825-.587 1.413T18 22zm6-5q.825 0 1.413-.587T14 15t-.587-1.412T12 13t-1.412.588T10 15t.588 1.413T12 17M9 8h6V6q0-1.25-.875-2.125T12 3t-2.125.875T9 6z"></path></svg>
					Please login to like, upvote, or comment.
				</a>
			</div>
		</div>
		<a href="/login" class="btn btn-accent w-full rounded-lg text-lg">Login to Comment</a>
	}
}

templ MoodMapper(currentUser *users.User, postID string, postUserID string, mood string) {
	if postUserID == currentUser.UserID {
		<div id="mood" class="dropdown-start dropdown dropdown-bottom">
			<div tabindex="0" role="button" class="flex items-center p-0 text-2xl">
				if mood == "elated" {
					😄
				} else if mood == "happy" {
					🙂
				} else if mood == "sad" {
					☹️
				} else if mood == "upset" {
					😫
				} else if mood == "angry" {
					😡
				} else {
					😐
				}
				<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="m12 15.4l-6-6L7.4 8l4.6 4.6L16.6 8L18 9.4z"></path></svg>
			</div>
			<ul tabindex="0" class="menu dropdown-content z-[1] w-auto rounded-lg border border-neutral/10 bg-white/70 p-2 shadow-lg backdrop-blur-3xl">
				<li class="text-sm font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/angry", postID))) }
						if mood == "angry" {
							class="bg-primary/30 text-primary-content hover:bg-primary/30 hover:text-primary-content"
						} else {
							class="hover:bg-primary/30 hover:text-primary-content"
						}
					><span class="me-2 inline text-xl">😡</span> Angry</button>
				</li>
				<li class="text-sm font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/upset", postID))) }
						if mood == "upset" {
							class="bg-primary/30 text-primary-content hover:bg-primary/30 hover:text-primary-content"
						} else {
							class="hover:bg-primary/30 hover:text-primary-content"
						}
					><span class="me-2 inline text-xl">😫</span> Upset</button>
				</li>
				<li class="text-sm font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/sad", postID))) }
						if mood == "sad" {
							class="bg-primary/30 text-primary-content hover:bg-primary/30 hover:text-primary-content"
						} else {
							class="hover:bg-primary/30 hover:text-primary-content"
						}
					><span class="me-2 inline text-xl">☹️</span> Sad</button>
				</li>
				<li class="text-sm font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/neutral", postID))) }
						if mood == "neutral" {
							class="bg-primary/30 text-primary-content hover:bg-primary/30 hover:text-primary-content"
						} else {
							class="hover:bg-primary/30 hover:text-primary-content"
						}
					><span class="me-2 inline text-xl">😐</span> Neutral</button>
				</li>
				<li class="text-sm font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/happy", postID))) }
						if mood == "happy" {
							class="bg-primary/30 text-primary-content hover:bg-primary/30 hover:text-primary-content"
						} else {
							class="hover:bg-primary/30 hover:text-primary-content"
						}
					><span class="me-2 inline text-xl">🙂</span> Happy</button>
				</li>
				<li class="text-sm font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/elated", postID))) }
						if mood == "elated" {
							class="bg-primary/30 text-primary-content hover:bg-primary/30 hover:text-primary-content"
						} else {
							class="hover:bg-primary/30 hover:text-primary-content"
						}
					><span class="me-2 inline text-xl">😄</span> Elated</button>
				</li>
			</ul>
		</div>
	} else {
		<div id="mood" class="flex items-center text-2xl">
			if mood == "elated" {
				😄
			} else if mood == "happy" {
				🙂
			} else if mood == "sad" {
				☹️
			} else if mood == "upset" {
				😫
			} else if mood == "angry" {
				😡
			} else {
				😐
			}
		</div>
	}
}

templ PartialMoodMapper(currentUser *users.User, postID string, postUserID string, mood string) {
	@MoodMapper(currentUser, postID, postUserID, mood)
	@MoodBar(mood, "true")
}

templ MoodBar(mood string, oob string) {
	<ul
		id="mood-bar"
		class="relative mb-8 flex justify-around text-xl lg:text-4xl"
		if oob == "true" {
			hx-swap-oob="true"
		}
	>
		<div class="absolute -left-1/2 top-1/2 hidden -translate-y-1/2 rounded-full border-4 border-accent/30 lg:flex lg:w-[4000px]"></div>
		<li
			if mood == "angry" {
				class="z-[1] flex items-center justify-center text-3xl hover:animate-wiggle lg:text-6xl"
			} else {
				class="z-[1] flex items-center saturate-[0.2] hover:animate-wiggle"
			}
		>
			😡
		</li>
		<li
			if mood == "upset" {
				class="z-[1] flex items-center justify-center text-3xl hover:animate-wiggle lg:text-6xl"
			} else {
				class="z-[1] flex items-center saturate-[0.2] hover:animate-wiggle"
			}
		>
			😫
		</li>
		<li
			if mood == "sad" {
				class="z-[1] flex items-center justify-center text-3xl hover:animate-wiggle lg:text-6xl"
			} else {
				class="z-[1] flex items-center saturate-[0.2] hover:animate-wiggle"
			}
		>
			☹️
		</li>
		<li
			if mood == "neutral" {
				class="z-[1] flex items-center justify-center text-3xl hover:animate-wiggle lg:text-6xl"
			} else {
				class="z-[1] flex items-center saturate-[0.2] hover:animate-wiggle"
			}
		>
			😐
		</li>
		<li
			if mood == "happy" {
				class="z-[1] flex items-center justify-center text-3xl hover:animate-wiggle lg:text-6xl"
			} else {
				class="z-[1] flex items-center saturate-[0.2] hover:animate-wiggle"
			}
		>
			🙂
		</li>
		<li
			if mood== "elated" {
				class="z-[1] flex items-center justify-center text-3xl hover:animate-wiggle lg:text-6xl"
			} else {
				class="z-[1] flex items-center saturate-[0.2] hover:animate-wiggle"
			}
		>
			😄
		</li>
	</ul>
}

templ PartialLikePost(postID string, like string) {
	<button
		id="post-like-button"
		hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/like", postID))) }
		hx-swap="outerHTML"
		hx-target="#post-like-button"
		hx-ext="response-targets"
		hx-target-403="#toast"
	>
		if like == "1" {
			<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="h-7 w-7 text-error/60" viewBox="0 0 24 24">
				<path fill="currentColor" d="M12 20.325q-.35 0-.712-.125t-.638-.4l-1.725-1.575q-2.65-2.425-4.788-4.812T2 8.15Q2 5.8 3.575 4.225T7.5 2.65q1.325 0 2.5.562t2 1.538q.825-.975 2-1.537t2.5-.563q2.35 0 3.925 1.575T22 8.15q0 2.875-2.125 5.275T15.05 18.25l-1.7 1.55q-.275.275-.637.4t-.713.125"></path>
			</svg>
		} else {
			<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="h-7 w-7 text-neutral/60" viewBox="0 0 24 24">
				<path fill="currentColor" d="M12 20.325q-.35 0-.712-.125t-.638-.4l-1.725-1.575q-2.65-2.425-4.788-4.812T2 8.15Q2 5.8 3.575 4.225T7.5 2.65q1.325 0 2.5.562t2 1.538q.825-.975 2-1.537t2.5-.563q2.35 0 3.925 1.575T22 8.15q0 2.875-2.125 5.275T15.05 18.25l-1.7 1.55q-.275.275-.637.4t-.713.125M11.05 6.75q-.725-1.025-1.55-1.563t-2-.537q-1.5 0-2.5 1t-1 2.5q0 1.3.925 2.763t2.213 2.837t2.65 2.575T12 18.3q.85-.775 2.213-1.975t2.65-2.575t2.212-2.837T20 8.15q0-1.5-1-2.5t-2.5-1q-1.175 0-2 .538T12.95 6.75q-.175.25-.425.375T12 7.25t-.525-.125t-.425-.375m.95 4.725"></path>
			</svg>
		}
	</button>
}

templ replyBody(currentUser *users.User, reply posts.Reply, highlight string) {
	<div
		id={ "reply-" + reply.ID.String() }
		if reply.ID.String() == highlight {
			class="h-auto w-full animate-highlight-comment-main rounded-xl border border-neutral/10 bg-white/70 p-4"
		} else {
			class="h-auto w-full rounded-xl border border-neutral/10 bg-white/70 p-4"
		}
	>
		<div id={ "reply-delete-loader-" + reply.ID.String() } class="absolute left-1/2 top-1/2 z-10 hidden h-full w-full -translate-x-1/2 -translate-y-1/2 justify-center rounded-xl bg-red-400/50 backdrop-blur-[1px]"><span class="loading loading-spinner loading-md text-error"></span></div>
		<div>
			<div class="flex">
				<div class="flex grow items-center">
					<div class="avatar me-4">
						<div class="w-16 rounded-full border border-neutral/20 bg-base-100">
							<img src={ string(templ.URL(reply.AvatarPath())) } class="scale-125" alt={ reply.PreferredName + "'s Avatar" }/>
						</div>
					</div>
					<div>
						<div class="text-xl font-bold">
							{ reply.PreferredName }
						</div>
						<div class="text-xs text-base-content/60">
							{ reply.CreatedAt.Process() }
						</div>
					</div>
				</div>
				<div class="flex items-center text-base">
					if reply.UserID == currentUser.UserID {
						<div id={ "reply-dropdown-" + reply.ID.String() } class="dropdown dropdown-end ms-8">
							<div tabindex="0" role="button" class="flex items-center justify-center rounded-lg text-neutral/70">
								<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="material-symbols-more-horiz inline-block h-6 w-6" viewBox="0 0 24 24"><path fill="currentColor" d="M6 14q-.825 0-1.412-.587T4 12t.588-1.412T6 10t1.413.588T8 12t-.587 1.413T6 14m6 0q-.825 0-1.412-.587T10 12t.588-1.412T12 10t1.413.588T14 12t-.587 1.413T12 14m6 0q-.825 0-1.412-.587T16 12t.588-1.412T18 10t1.413.588T20 12t-.587 1.413T18 14"></path></svg>
							</div>
							<ul tabindex="0" class="menu dropdown-content z-[5] w-52 rounded-box border-2 border-accent/20 bg-primary/15 p-2 shadow-lg backdrop-blur-[50px]">
								<li
									hx-target="#comment-form"
									hx-swap="outerHTML"
									class="flex rounded-md hover:bg-accent hover:text-accent-content focus:text-accent-content active:text-accent-content"
								>
									// hx-get={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/edit", reply.PostID, comments[i].ID.String()))) }
									<button class="flex">
										<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
											<path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path>
										</svg>Edit comment
									</button>
								</li>
								<li
									data-parent-reply-id={ reply.ID.String() }
									hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/reply/%s/delete", reply.PostID, reply.CommentID.String(), reply.ID.String()))) }
									hx-target="#posts"
									hx-trigger="click"
									hx-swap="outerHTML swap:1s"
									hx-target-403="#toast"
									class="reply-delete-button rounded-md text-error hover:bg-error hover:text-error-content focus:text-error-content active:text-error-content"
								>
									<button class="flex">
										<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
											<path fill="currentColor" d="M9 17h2V8H9zm4 0h2V8h-2zm-8 4V6H4V4h5V3h6v1h5v2h-1v15z"></path>
										</svg>
										Delete comment
									</button>
								</li>
							</ul>
						</div>
					}
				</div>
			</div>
		</div>
		<div class="comment-content pt-4 text-base">{ reply.Content }</div>
	</div>
}

templ ShowTags(currentUser *users.User, p posts.Post) {
	<div
		id="tags-container"
		class="group flex cursor-pointer flex-wrap items-center gap-2"
		hx-get={ string(templ.URL(fmt.Sprintf("/posts/%s/tags/edit", p.ID))) }
		hx-target="#tags-container"
		hx-swap="outerHTML"
	>
		if len(p.Tags.Tags) == 0 {
			// <svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="mdi:tag me-2 text-neutral/70" viewBox="0 0 24 24">
			// 	<path fill="currentColor" d="m21.41 11.58l-9-9A2 2 0 0 0 11 2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 .59 1.42l9 9A2 2 0 0 0 13 22a2 2 0 0 0 1.41-.59l7-7A2 2 0 0 0 22 13a2 2 0 0 0-.59-1.42M13 20l-9-9V4h7l9 9M6.5 5A1.5 1.5 0 1 1 5 6.5A1.5 1.5 0 0 1 6.5 5"></path>
			// </svg>
			if currentUser.UserID == p.UserID {
				<button class="btn btn-xs rounded-lg border-0 bg-neutral text-neutral-content hover:bg-neutral">
					<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="material-symbols:add-2" viewBox="0 0 24 24"><path fill="currentColor" d="M11 21v-8H3v-2h8V3h2v8h8v2h-8v8z"></path></svg>Add Tags
				</button>
			} else {
				Current user not the post owner
			}
		} else {
			// <svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="mdi:tag me-2 text-secondary" viewBox="0 0 24 24"><path fill="currentColor" d="M5.5 7A1.5 1.5 0 0 1 4 5.5A1.5 1.5 0 0 1 5.5 4A1.5 1.5 0 0 1 7 5.5A1.5 1.5 0 0 1 5.5 7m15.91 4.58l-9-9C12.05 2.22 11.55 2 11 2H4c-1.11 0-2 .89-2 2v7c0 .55.22 1.05.59 1.41l8.99 9c.37.36.87.59 1.42.59s1.05-.23 1.41-.59l7-7c.37-.36.59-.86.59-1.41c0-.56-.23-1.06-.59-1.42"></path></svg>
			for i := 0; i < len(p.Tags.Tags); i++ {
				<span class="text-md btn btn-sm border-0 bg-neutral/80 text-neutral-content hover:bg-neutral/80">{ p.Tags.Tags[i] }</span>
			}
		}
	</div>
}
