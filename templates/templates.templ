package templates

import (
	"context"
	"fmt"
	"gorant/posts"
	"gorant/users"
)

templ Base(title string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<meta description="GoRant: Go starter kit"/>
			<meta name="htmx-config" content='{"includeIndicatorStyles": false}'/>
			<title>{ title }</title>
			<link href="/static/css/output/styles.css" rel="stylesheet"/>
			<script src="/static/js/ext/htmx.min.js"></script>
		</head>
		<body class="grid min-h-[100dvh] grid-rows-[auto_1fr_auto] font-sans">
			<header id="navbar" class="navbar mb-10 p-0">
				<div class="navbar-start">
					<div class="dropdown">
						<div tabindex="0" role="button" class="btn btn-ghost lg:hidden">
							<svg
								xmlns="http://www.w3.org/2000/svg"
								class="h-5 w-5"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M4 6h16M4 12h8m-8 6h16"
								></path>
							</svg>
						</div>
						<ul
							tabindex="-1"
							class="menu dropdown-content menu-sm z-[1] mt-3 w-52 rounded-box bg-base-100 p-2 opacity-0 shadow"
						>
							<li>
								<a>Posts</a>
								<ul class="p-2"></ul>
							</li>
							<li><a>Contact</a></li>
							<li><a href="/about">About</a></li>
						</ul>
					</div>
					<a href="/" class="group ps-6 pt-2 text-3xl">
						<span class="inline-block rounded-full bg-accent p-2 font-medium text-accent-content transition-all duration-200 group-hover:bg-orange-700">Go</span><span class="inline-block rounded py-2 pe-4 ps-2 font-bold text-accent transition-all duration-500 ease-in-out group-hover:text-orange-500">Rant</span>
					</a>
				</div>
				<div class="navbar-center hidden lg:flex">
					<ul class="menu menu-horizontal px-1 opacity-0">
						<li>
							<details>
								<summary>Posts</summary>
								<ul class="p-2"></ul>
							</details>
						</li>
						<li><a>Contact</a></li>
						<li><a href="/about">About</a></li>
					</ul>
				</div>
				<div class="navbar-end pe-6">
					if GetCurrentUser(ctx)  == "" {
						<div>
							<a href="/login" class="btn btn-accent btn-sm me-2">Register</a>
							<a href="/login" class="btn btn-outline btn-accent btn-sm me-2">Login</a>
						</div>
					}
					if GetCurrentUser(ctx)  != "" {
						<div class="flex items-center">
							<div class="dropdown dropdown-end dropdown-bottom">
								<div tabindex="0" role="button" class="m-1">
									<button class="flex items-center rounded text-xs font-medium">{ GetCurrentUser(ctx) }<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="ms-4 h-8 w-8" viewBox="0 0 24 24"><path fill="currentColor" d="M5.85 17.1q1.275-.975 2.85-1.537T12 15t3.3.563t2.85 1.537q.875-1.025 1.363-2.325T20 12q0-3.325-2.337-5.663T12 4T6.337 6.338T4 12q0 1.475.488 2.775T5.85 17.1M12 13q-1.475 0-2.488-1.012T8.5 9.5t1.013-2.488T12 6t2.488 1.013T15.5 9.5t-1.012 2.488T12 13m0 9q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg></button>
								</div>
								<ul tabindex="0" class="menu dropdown-content z-[1] w-52 rounded-box border border-neutral/30 bg-base-100 p-2 shadow-lg">
									<li class="flex rounded-md hover:bg-accent hover:text-accent-content"><a href="/settings"><svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="M14.5 23q-.625 0-1.062-.437T13 21.5v-7q0-.625.438-1.062T14.5 13h7q.625 0 1.063.438T23 14.5v7q0 .625-.437 1.063T21.5 23zm-5.25-1l-.4-3.2q-.325-.125-.612-.3t-.563-.375L4.7 19.375l-2.75-4.75l2.575-1.95Q4.5 12.5 4.5 12.338v-.675q0-.163.025-.338L1.95 9.375l2.75-4.75l2.975 1.25q.275-.2.575-.375t.6-.3l.4-3.2h5.5l.4 3.2q.325.125.613.3t.562.375l2.975-1.25l2.75 4.75L19.925 11H15.4q-.35-1.075-1.25-1.787t-2.1-.713q-1.45 0-2.475 1.025T8.55 12q0 1.2.675 2.1T11 15.35V22zM15 21h6v-.825q-.625-.575-1.4-.875T18 19t-1.6.3t-1.4.875zm3-3q.625 0 1.063-.437T19.5 16.5t-.437-1.062T18 15t-1.062.438T16.5 16.5t.438 1.063T18 18"></path></svg>Settings</a></li>
									<li class="flex rounded-md hover:bg-accent hover:text-accent-content"><a href="/logout"><svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="M5 21q-.825 0-1.412-.587T3 19V5q0-.825.588-1.412T5 3h7v2H5v14h7v2zm11-4l-1.375-1.45l2.55-2.55H9v-2h8.175l-2.55-2.55L16 7l5 5z"></path></svg>Logout</a></li>
								</ul>
							</div>
						</div>
					}
				</div>
			</header>
			<div id="container" class="grid justify-items-center px-4">
				{ children... }
			</div>
			<footer id="footer" class="mt-16 text-center text-sm">
				<p>Copyright Â© 2024 Zixian Chen. All rights reserved.</p>
				<div>
					<a href="https://zixianchen.com/projects" class="underline">Portfolio</a> | <a href="https://zixianchen.com/contact/" class="underline">Feedback</a> | <button id="credit-modal" class="underline" onclick="credit_modal.showModal()">Credits</button>
				</div>
			</footer>
			<dialog id="credit_modal" class="modal">
				<div class="modal-box p-8">
					<h2 class="pb-6 text-4xl font-bold">Credits</h2>
					<h3 class="font-bold">SVGs</h3>
					<ul class="list-disc">
						<li class="ms-6">Happy sad by Ahmad Arzaha from <a href="https://thenounproject.com/browse/icons/term/happy-sad/" class="underline" target="_blank" title="Happy sad Icons">Noun Project</a> (CC BY 3.0)</li>
						<li class="ms-6">empty wallet by Amethyst Studio from <a href="https://thenounproject.com/browse/icons/term/empty-wallet/" class="underline" target="_blank" title="empty wallet Icons">Noun Project</a> (CC BY 3.0)</li>
					</ul>
					<div class="modal-action w-full">
						<form method="dialog" class="w-full">
							<button class="btn btn-accent mt-4 w-full">Close</button>
						</form>
					</div>
				</div>
			</dialog>
		</body>
	</html>
}

templ Post(message string, post posts.Post, comments []posts.JoinComment, postID string) {
	@Base("GoRant - Post") {
		<main class="grid w-full max-w-[1600px] content-center justify-items-center gap-8 space-y-8 lg:grid-cols-3">
			<div class="w-full space-y-4 justify-self-start lg:col-span-3">
				<div class="flex flex-wrap items-center">
					<div class="me-4">
						@MoodMapper(post.PostID, post.UserID, post.Mood)
					</div>
					<div class="grow space-y-2">
						<h1 class="text-5xl font-extrabold uppercase">{ postID }</h1>
						<div class="flex items-center" id="post-description">
							if post.UserID == GetCurrentUser(ctx) {
								<button id="post-description-static" class="flex flex-wrap items-center">
									if post.Description == "" {
										Add a description here
									} else {
										{ post.Description }
									}
									<svg xmlns="http://www.w3.org/2000/svg" class="ms-4" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path></svg>
								</button>
								<form id="post-description-form" class="join hidden w-full" hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/description/edit", postID))) } hx-target="#post-description" hx-swap="outerHTML">
									<label class="input join-item input-bordered flex w-full max-w-xl items-center rounded-3xl">
										<svg xmlns="http://www.w3.org/2000/svg" class="me-4 inline text-neutral/30" width="1.4em" height="1.4em" viewBox="0 0 24 24"><path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path></svg>
										<input
											type="text"
											id="post-description-input"
											name="post-description-input"
											class="grow"
											if post.Description == "" {
												placeholder="Add a description here"
											}
											value={ post.Description }
										/>
										<button type="button" id="post-description-cancel" class="text-accent">
											<svg xmlns="http://www.w3.org/2000/svg" width="1.4em" height="1.4em" viewBox="0 0 24 24"><path fill="currentColor" d="m8.4 17l3.6-3.6l3.6 3.6l1.4-1.4l-3.6-3.6L17 8.4L15.6 7L12 10.6L8.4 7L7 8.4l3.6 3.6L7 15.6zm3.6 5q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
										</button>
									</label>
									<button id="post-description-button" class="btn btn-accent join-item rounded-3xl px-6">Save</button>
								</form>
							} else {
								if post.Description == "" {
									No description added
								} else {
									{ post.Description }
								}
							}
						</div>
					</div>
					if post.UserID == GetCurrentUser(ctx) {
						<details id="more-actions-dropdown" class="dropdown dropdown-end">
							<summary class="btn btn-outline btn-accent btn-sm flex items-center justify-center rounded-lg border-0 focus:bg-accent focus:text-accent-content">
								<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="inline-block h-6 w-6" viewBox="0 0 24 24"><path fill="currentColor" d="m9.25 22l-.4-3.2q-.325-.125-.612-.3t-.563-.375L4.7 19.375l-2.75-4.75l2.575-1.95Q4.5 12.5 4.5 12.338v-.675q0-.163.025-.338L1.95 9.375l2.75-4.75l2.975 1.25q.275-.2.575-.375t.6-.3l.4-3.2h5.5l.4 3.2q.325.125.613.3t.562.375l2.975-1.25l2.75 4.75l-2.575 1.95q.025.175.025.338v.674q0 .163-.05.338l2.575 1.95l-2.75 4.75l-2.95-1.25q-.275.2-.575.375t-.6.3l-.4 3.2zm2.8-6.5q1.45 0 2.475-1.025T15.55 12t-1.025-2.475T12.05 8.5q-1.475 0-2.488 1.025T8.55 12t1.013 2.475T12.05 15.5"></path></svg>
							</summary>
							<ul class="menu dropdown-content z-[1] w-52 rounded-box border border-neutral/30 bg-base-100 p-2 shadow-lg">
								<li class="flex rounded-md hover:bg-accent hover:text-accent-content focus:text-accent-content active:text-accent-content">
									<button id="more-actions-edit-button" class="flex h-full w-full">
										<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
											<path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path>
										</svg>Edit description
									</button>
								</li>
								<form method="post" action={ templ.URL(fmt.Sprintf("/posts/%s/delete", post.PostID)) }>
									<li class="rounded-md text-error hover:bg-error hover:text-error-content focus:text-error-content active:text-error-content">
										<button class="flex">
											<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
												<path fill="currentColor" d="M9 17h2V8H9zm4 0h2V8h-2zm-8 4V6H4V4h5V3h6v1h5v2h-1v15z"></path>
											</svg>Delete this post
										</button>
									</li>
								</form>
							</ul>
						</details>
						<script>
							(function activateDescriptionForm() {
								document.getElementById("post-description-static").addEventListener("click", () => {
									const postDescriptionForm = document.getElementById("post-description-form")
									postDescriptionForm.classList.remove("hidden")
									const postDescriptionStatic = document.getElementById("post-description-static")
									postDescriptionStatic.classList.add("hidden")
								})

								document.getElementById("post-description-cancel").addEventListener("click", () => {
									const postDescriptionForm = document.getElementById("post-description-form")
									postDescriptionForm.classList.add("hidden")
									const postDescriptionStatic = document.getElementById("post-description-static")
									postDescriptionStatic.classList.remove("hidden")
								})

								document.getElementById("more-actions-edit-button").addEventListener("click", () => {
									const postDescriptionForm = document.getElementById("post-description-form")
									postDescriptionForm.classList.remove("hidden")
									const postDescriptionStatic = document.getElementById("post-description-static")
									postDescriptionStatic.classList.add("hidden")
								})
							})();

							(function() {
								document.addEventListener("click", (evt) => {
									if (evt.target.id !== "more-actions-dropdown" && document.getElementById("more-actions-dropdown").open) {
										document.getElementById("more-actions-dropdown").open = false
									}
								})
							})();
						</script>
					}
				</div>
			</div>
			<article id="posts" class="w-full space-y-4 lg:col-span-2">
				if len(comments) > 0 {
					for i := 0; i < len(comments); i++ {
						<div id={ "post-" + comments[i].CommentID } class="flex h-auto rounded-lg border border-neutral/30 relative">
							<div id={ "post-delete-loader-" + comments[i].CommentID } class="opacity-100 hidden w-full absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10 justify-center"><span class="loading loading-spinner loading-md text-error"></span></div>
							<div id={ "post-upvote-" + comments[i].CommentID } class="grid w-20 content-center bg-primary/30 p-2 text-center text-xl font-bold">
								if comments[i].CurrentUserVoted == "true" {
									<button
										hx-target="#posts"
										hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/upvote", postID, comments[i].CommentID))) }
										class="inline-block h-auto text-4xl text-orange-600"
									>
										<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="inline-block" viewBox="0 0 24 24"><path fill="currentColor" d="m7 14l5-5l5 5z"></path></svg>
									</button>
								} else {
									<button
										hx-target="#posts"
										hx-trigger="click"
										hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/upvote", postID, comments[i].CommentID))) }
										class="inline-block h-auto text-4xl hover:text-orange-600 active:-translate-y-1"
									>
										<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="inline-block" viewBox="0 0 24 24"><path fill="currentColor" d="m7 14l5-5l5 5z"></path></svg>
									</button>
								}
								<div>
									if len(comments[i].CountString) > 0 {
										{ comments[i].CountString }
									} else {
										0
									}
								</div>
							</div>
							<div id={ "post-body-" + comments[i].CommentID } class="w-full grow bg-lime-300/10 p-4">
								<div class="flex border-b border-accent/20 pb-2">
									<div class="flex grow items-center">
										<div class="me-4 grid h-12 w-12 place-items-center rounded-full bg-neutral/70 text-center text-2xl font-bold text-neutral-content">{ comments[i].Initials }</div>
										<div>
											<div class="text-xl font-bold">{ comments[i].PreferredName }</div>
											<div class="text-xs text-base-content/60">{ comments[i].CreatedAt }</div>
										</div>
									</div>
									<div class="flex items-center text-base">
										if comments[i].UserID == GetCurrentUser(ctx) {
											<div class="dropdown dropdown-end ms-8">
												<div tabindex="0" role="button" class="flex items-center justify-center rounded-lg text-neutral/70">
													<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="material-symbols-more-horiz inline-block h-6 w-6" viewBox="0 0 24 24"><path fill="currentColor" d="M6 14q-.825 0-1.412-.587T4 12t.588-1.412T6 10t1.413.588T8 12t-.587 1.413T6 14m6 0q-.825 0-1.412-.587T10 12t.588-1.412T12 10t1.413.588T14 12t-.587 1.413T12 14m6 0q-.825 0-1.412-.587T16 12t.588-1.412T18 10t1.413.588T20 12t-.587 1.413T18 14"></path></svg>
												</div>
												<ul tabindex="0" class="menu dropdown-content z-[1] w-52 rounded-box bg-base-100 p-2 shadow-lg">
													<li
														hx-target={ string(templ.URL(fmt.Sprintf("#post-%s-content", comments[i].CommentID))) }
														hx-swap="outerHTML"
														hx-get={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/edit", postID, comments[i].CommentID))) }
														class="flex rounded-md hover:bg-accent hover:text-accent-content focus:text-accent-content active:text-accent-content"
													>
														<button class="flex">
															<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
																<path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path>
															</svg>Edit comment
														</button>
													</li>
													<li
														hx-target="#posts"
														hx-swap="outerHTML swap:1.2s"
														hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/delete", postID, comments[i].CommentID))) }
														data-parent-comment-id={ comments[i].CommentID }
														class="delete-button rounded-md text-error hover:bg-error hover:text-error-content focus:text-error-content active:text-error-content"
													>
														<button class="flex">
															<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
																<path fill="currentColor" d="M9 17h2V8H9zm4 0h2V8h-2zm-8 4V6H4V4h5V3h6v1h5v2h-1v15z"></path>
															</svg>Delete comment
														</button>
													</li>
												</ul>
											</div>
										}
									</div>
								</div>
								<div id={ "post-" + comments[i].CommentID + "-content" } class="whitespace-pre-line py-4 text-base">{ comments[i].Content }</div>
							</div>
						</div>
					}
				} else {
					<div class="grid place-items-center gap-4 rounded-lg p-8">
						<img src="/static/images/noun-empty-wallet-6118188.svg" width="234px" height="275px" class="" alt="Nothing!"/>
						<h2 class="text-center text-2xl font-extrabold">No comments</h2>
						<h2 class="text-center">Start by posting a comment!</h2>
					</div>
				}
				<script>
				(function() {
					const deleteButtons = document.getElementsByClassName("delete-button")
					const postUpvoteClasses = ["bg-red-400/40", "transition-all", "opacity-40", "duration-1000", "ease-out"]
					const postBodyClasses = ["bg-red-400/20", "transition-all", "opacity-40", "duration-1000", "ease-out"]
					for (let i = 0; i < deleteButtons.length; i++) {
						deleteButtons[i].addEventListener("click", () => {
							const parentCommentId = "post-" + deleteButtons[i].dataset.parentCommentId
							

							const parentComment = document.getElementById(parentCommentId)
							if (parentComment.classList.contains("animate-highlight-border")) {
								parentComment.classList.remove("animate-highlight-border")
							}

							const postUpvote = document.getElementById("post-upvote-" + deleteButtons[i].dataset.parentCommentId)
							const postBody = document.getElementById("post-body-" + deleteButtons[i].dataset.parentCommentId)

							const deleteLoader = document.getElementById("post-delete-loader-" + deleteButtons[i].dataset.parentCommentId)
							deleteLoader.classList.remove("hidden")
							deleteLoader.classList.add("flex")

							postUpvote.classList.remove("bg-primary/30")
							postUpvote.classList.add(...postUpvoteClasses)
							postBody.classList.add(...postBodyClasses)
							// Needs to remove the animation and force a recalculation.
							// Otherwise css animation won't start on the el which had animate-highlight-border applied to it.
							// Read more: https://stackoverflow.com/questions/22093141/adding-class-via-js-wont-trigger-css-animation
							// void parentComment.offsetWidth
							// parentComment.classList.add(...classes)
						})
					}
				})()
				</script>
			</article>
			<div class="relative w-full">
				<div class="sticky top-2 grid justify-items-center">
					<div class="w-full" id="form-message">
						if GetCurrentUser(ctx) == "" {
							<div class="w-full pb-4" id="">
								<div class="flex items-center rounded-lg border border-neutral/20 p-4 text-neutral/80">
									<a href="/auth/login" class="flex items-center">
										<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="M11 17h2v-6h-2zm1-8q.425 0 .713-.288T13 8t-.288-.712T12 7t-.712.288T11 8t.288.713T12 9m0 13q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
										You'll need to be logged in to post.
									</a>
								</div>
							</div>
						}
					</div>
					@PostForm(postID, "false")
				</div>
			</div>
		</main>
	}
}

templ PostForm(postID string, oobSwap string) {
	<form
		method="post"
		id="comment-form"
		hx-post={ "/posts/" + postID + "/new" }
		if oobSwap == "true" {
			hx-swap-oob="true"
		}
		hx-swap="outerHTML"
		hx-target="#posts"
		class="w-full space-y-4 rounded-lg border border-neutral/20 p-4 shadow-lg lg:max-w-2xl"
	>
		<h2 class="text-xl font-bold">Add Comment</h2>
		<label class="form-control">
			<div class="label flex">
				<div class="label-text grow">Message</div>
				<div class="text-xs italic"><span id="form-message-chars-remaining"></span> characters left</div>
			</div>
			<textarea name="message" id="comment-form-message-input" placeholder="Enter a message of at least 10 chars" class="textarea textarea-bordered min-h-24" minlength="10" maxlength="2000" rows="7" required></textarea>
			<div id="form-message-error"></div>
		</label>
		<div>
			if GetCurrentUser(ctx) != "" {
				<button id="comment-submit-button" class="btn btn-accent w-full rounded-3xl text-lg" style="view-transition-name: add-post-button;">Add Comment</button>
			} else {
				<button id="comment-submit-button" class="btn btn-accent w-full rounded-3xl text-lg" style="view-transition-name: add-post-button;" disabled>Add Comment</button>
			}
		</div>
		<script src="/static/js/output/comment-form.js"></script>
	</form>
}

templ About() {
	@Base("About") {
		<h1>About</h1>
	}
}

templ StarterWelcome(posts []posts.JoinPost) {
	@Base("GoRant") {
		<div class="grid w-full max-w-[1400px] justify-items-center">
			<h1 id="logo" class="mb-4 mt-8 flex items-center text-5xl font-extrabold">
				G
				@HappySadSvg()
				Rant
			</h1>
			<form method="post" id="post-form" action="/posts" class="join flex w-full justify-center lg:pt-0">
				<label class="flex items-center input join-item input-bordered input-accent w-full max-w-96 rounded-3xl bg-primary/10 text-base-content shadow-lg focus:shadow-lg focus:outline-none active:border-2 active:shadow-lg">
					<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="text-accent me-2" viewBox="0 0 24 24"><path fill="currentColor" d="M9.5 16q-2.725 0-4.612-1.888T3 9.5t1.888-4.612T9.5 3t4.613 1.888T16 9.5q0 1.1-.35 2.075T14.7 13.3l5.6 5.6q.275.275.275.7t-.275.7t-.7.275t-.7-.275l-5.6-5.6q-.75.6-1.725.95T9.5 16m0-2q1.875 0 3.188-1.312T14 9.5t-1.312-3.187T9.5 5T6.313 6.313T5 9.5t1.313 3.188T9.5 14"></path></svg>
					<input type="text" id="post-id" name="post-id" placeholder="Enter a post ID to continue" class="grow" autocomplete="off" required/>
				</label>
				<button id="post-button" class="btn btn-accent join-item min-w-20 rounded-3xl text-xl shadow-lg">Go</button>
			</form>
			<div id="post-form-message" class="mt-2 text-sm text-error">
				{ children... }
			</div>
			<div id="content" class="w-full space-y-8 lg:pt-16 max-w-[1000px]">
				<div class="flex items-center">
					<h2 class="grow text-3xl font-bold">Posts</h2>
					if GetCurrentUser(ctx) == "" {
						<a href="/login?r=new" id="add-new-login-first" class="btn btn-accent rounded-3xl">
							<h3 id="add-new-header" class="text-lg font-bold">New Post</h3>
						</a>
					} else {
						<button id="add-new" class="btn btn-accent rounded-lg px-6 text-lg">
							<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="me-2 inline" viewBox="0 0 24 24"><path fill="currentColor" d="M7 9h8V7H7zm0 4h5v-2H7zm10 7v-3h-3v-2h3v-3h2v3h3v2h-3v3zM3 20V5q0-.825.588-1.412T5 3h12q.825 0 1.413.588T19 5v5.075q-.25-.05-.5-.062T18 10q-2.525 0-4.262 1.75T12 16q0 .25.013.5t.062.5H6z"></path></svg>New Topic
						</button>
					}
				</div>
				<div id="posts" class="grid gap-4">
					for i := 0; i < len(posts); i++ {
						<a href={ templ.URL(fmt.Sprintf("/posts/%s", posts[i].PostID)) } class="flex overflow-hidden rounded-lg border border-neutral/60 bg-primary/10 p-2 transition-all duration-200 ease-out hover:border-secondary hover:ring-2 hover:ring-accent/50 hover:ring-offset-2">
							<div class="group grid place-items-center overflow-hidden rounded-xl border border-neutral/5 bg-black/5 text-center text-5xl">
								<span class="inline-block transition-all delay-500 group-hover:animate-wiggle">
									if posts[i].Mood  == "elated" {
										ð
									} else if posts[i].Mood  == "happy" {
										ð
									} else if posts[i].Mood  == "sad" {
										â¹ï¸
									} else if posts[i].Mood  == "upset" {
										ð«
									} else if posts[i].Mood  == "angry" {
										ð¡
									} else {
										ð
									}
								</span>
							</div>
							<div class="ps-6 pe-4 grow">
								<h3 class="truncate text-xl font-bold">
									{ posts[i].PostID }
								</h3>
								<div class="flex items-center">
									<div class="grow text-lg">by { posts[i].PreferredName }</div>
									<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="me-8 text-neutral/60" viewBox="0 0 24 24"><path fill="currentColor" d="m12 21l-1.45-1.3q-2.525-2.275-4.175-3.925T3.75 12.812T2.388 10.4T2 8.15Q2 5.8 3.575 4.225T7.5 2.65q1.3 0 2.475.55T12 4.75q.85-1 2.025-1.55t2.475-.55q2.35 0 3.925 1.575T22 8.15q0 1.15-.387 2.25t-1.363 2.412t-2.625 2.963T13.45 19.7zm0-2.7q2.4-2.15 3.95-3.687t2.45-2.675t1.25-2.026T20 8.15q0-1.5-1-2.5t-2.5-1q-1.175 0-2.175.662T12.95 7h-1.9q-.375-1.025-1.375-1.687T7.5 4.65q-1.5 0-2.5 1t-1 2.5q0 .875.35 1.763t1.25 2.025t2.45 2.675T12 18.3m0-6.825"></path></svg>
									<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="me-1 text-neutral/60" viewBox="0 0 24 24"><path fill="currentColor" d="M2 22V4q0-.825.588-1.412T4 2h16q.825 0 1.413.588T22 4v12q0 .825-.587 1.413T20 18H6zm4-8h8v-2H6zm0-3h12V9H6zm0-3h12V6H6z"></path></svg>{ posts[i].CommentsCountString }
								</div>
							</div>
						</a>
					}
				</div>
			</div>
		</div>
		<script src="/static/js/output/index.js"></script>
	}
}

templ StarterWelcomeError(posts []posts.JoinPost) {
	@StarterWelcome(posts) {
		No special characters allowed! ID may contain only A-Z, a-z, 0-9, dash, underscore.
	}
}

templ Error(message string) {
	@Base("GoRant") {
		<main class="grid place-items-center content-center">
			<h1 class="text-5xl font-extrabold">GO. RANT.</h1>
			<img src="/static/images/reshot-illustration-404-page-HASGL2MQBU.svg" alt="Error" class="py-10"/>
			<p class="text-2xl">{ message }</p>
		</main>
	}
}

templ Toast(status string, message string) {
	if status == "error" {
		<div id="toast" class="toast toast-end animate-slide-up-down text-base font-normal">
			<div class="alert alert-info rounded-lg bg-error">
				<span class="flex items-center text-error-content">
					<svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="M12 17q.425 0 .713-.288T13 16t-.288-.712T12 15t-.712.288T11 16t.288.713T12 17m-1-4h2V7h-2zm1 9q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
					{ message }
				</span>
			</div>
		</div>
	} else if status == "success" {
		<div id="toast" class="toast toast-end animate-slide-up-down text-base font-normal">
			<div class="alert alert-info rounded-lg bg-success">
				<div class="flex items-center text-success-content">
					<svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="m10.6 16.6l7.05-7.05l-1.4-1.4l-5.65 5.65l-2.85-2.85l-1.4 1.4zM12 22q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
					<span>{ message }</span>
				</div>
			</div>
		</div>
	}
	<script>
		(function removeToast() {
		const toastEl = document.getElementById("toast")
		setTimeout(() => {
			toastEl.remove()
			console.log("Triggered")			
		}, 5000)
		})()
	</script>
}

templ MoodMapper(postID string, postUserID string, mood string) {
	if postUserID == GetCurrentUser(ctx) {
		<div id="mood" class="dropdown-start dropdown dropdown-bottom">
			<div tabindex="0" role="button" class="flex items-center text-5xl">
				if mood == "elated" {
					ð
				} else if mood == "happy" {
					ð
				} else if mood == "sad" {
					â¹ï¸
				} else if mood == "upset" {
					ð«
				} else if mood == "angry" {
					ð¡
				} else {
					ð
				}
				<svg xmlns="http://www.w3.org/2000/svg" width="0.5em" height="0.5em" viewBox="0 0 24 24"><path fill="currentColor" d="m12 15.4l-6-6L7.4 8l4.6 4.6L16.6 8L18 9.4z"></path></svg>
			</div>
			<ul tabindex="0" class="menu dropdown-content z-[1] w-auto bg-base-100 p-2 shadow">
				<li class="text-base font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/elated", postID))) }
					><span class="me-2 inline text-xl">ð</span> Elated</button>
				</li>
				<li class="text-base font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/happy", postID))) }
					><span class="me-2 inline text-xl">ð</span> Happy</button>
				</li>
				<li class="text-base font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/neutral", postID))) }
					><span class="me-2 inline text-xl">ð</span> Neutral</button>
				</li>
				<li class="text-base font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/sad", postID))) }
					><span class="me-2 inline text-xl">â¹ï¸</span> Sad</button>
				</li>
				<li class="text-base font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/upset", postID))) }
					><span class="me-2 inline text-xl">ð«</span> Upset</button>
				</li>
				<li class="text-base font-normal">
					<button
						hx-target="#mood"
						hx-swap="outerHTML"
						hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/angry", postID))) }
					><span class="me-2 inline text-xl">ð¡</span> Angry</button>
				</li>
			</ul>
		</div>
	} else {
		<div id="mood" class="flex items-center text-5xl">
			if mood == "elated" {
				ð
			} else if mood == "happy" {
				ð
			} else if mood == "sad" {
				â¹ï¸
			} else if mood == "upset" {
				ð«
			} else if mood == "angry" {
				ð¡
			} else {
				ð
			}
		</div>
	}
}

templ Settings(s users.User) {
	@Base("User Settings") {
		<main class="grid w-full max-w-[1600px] content-center justify-items-center gap-8 space-y-8">
			<div class="space-y-4">
				<div id="settings-message" class="hidden"></div>
				<div class="space-y-8 rounded-lg border border-neutral/30 p-8 shadow-lg">
					<h1 class="min-w-96 justify-self-center text-5xl font-extrabold">Settings</h1>
					<form method="post" class="grid gap-4" hx-post="/settings/edit" hx-target="#settings-message" hx-swap="outerHTML" id="settings-form">
						// action="/settings/edit" 
						<label class="form-control">
							<div class="label">
								<span class="label-text">Email</span>
							</div>
							<input type="text" name="username" value={ GetCurrentUser(ctx) } class="input input-bordered w-full" disabled/>
						</label>
						<label class="form-control w-full">
							<div class="label">
								<span class="label-text">Display Name</span>
							</div>
							<input type="text" name="preferred-name" value={ s.PreferredName } class="input input-bordered w-full"/>
						</label>
						<div class="form-control">
							<label class="label cursor-pointer">
								<span class="label-text me-4">Only send me essential emails.</span>
								<input
									name="contact-me"
									type="checkbox"
									if s.ContactMeString == "0" {
										checked="checked"
									}
									class="checkbox-accent checkbox"
								/>
							</label>
						</div>
						<button class="btn btn-accent mt-4 w-full rounded-3xl text-lg">Save</button>
						<div class="text-center text-sm underline hover:text-accent"><a href="/">Back to main page</a></div>
					</form>
				</div>
			</div>
		</main>
	}
}

templ SettingsFirstLogin(s users.User) {
	@Base("User Settings") {
		<main class="grid w-full max-w-[1600px] content-center justify-items-center gap-8 space-y-8">
			<div class="space-y-4">
				<div id="settings-message" class="flex w-full items-center rounded-lg border border-success bg-info p-2 text-info-content shadow-lg">
					<h2 class="flex flex-wrap items-center px-2">
						<svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="m10.95 18l5.65-5.65l-1.45-1.45l-4.225 4.225l-2.1-2.1L7.4 14.45zM6 22q-.825 0-1.412-.587T4 20V4q0-.825.588-1.412T6 2h8l6 6v12q0 .825-.587 1.413T18 22zm7-13h5l-5-5z"></path></svg>
						Welcome! How about setting a display name below?
					</h2>
				</div>
				<div class="space-y-8 rounded-lg border border-neutral/30 p-8 shadow-lg">
					<h1 class="min-w-96 justify-self-center text-5xl font-extrabold">Settings</h1>
					<form method="post" class="grid gap-4" hx-post="/settings/edit" hx-target="#settings-message" hx-swap="outerHTML" id="settings-form">
						// action="/settings/edit" 
						<label class="form-control">
							<div class="label">
								<span class="label-text">Email</span>
							</div>
							<input type="text" name="username" value={ GetCurrentUser(ctx) } class="input input-bordered w-full" disabled/>
						</label>
						<label class="form-control w-full">
							<div class="label">
								<span class="label-text font-bold text-info">Display Name</span>
							</div>
							<input id="preferred-name-input" type="text" name="preferred-name" value={ s.PreferredName } class="input input-bordered input-info w-full"/>
						</label>
						<div class="form-control">
							<label class="label cursor-pointer">
								<span class="label-text me-4">Only send me essential emails.</span>
								<input
									name="contact-me"
									type="checkbox"
									if s.ContactMeString == "0" {
										checked="checked"
									}
									class="checkbox-accent checkbox"
								/>
							</label>
						</div>
						<button class="btn btn-accent mt-4 w-full rounded-3xl text-lg">Save</button>
						<div class="text-center text-sm underline hover:text-accent"><a href="/">Back to main page</a></div>
					</form>
				</div>
			</div>
			<script>
				(function(){
					document.getElementById("preferred-name-input").focus()
				}())
			</script>
		</main>
	}
}

// For type safety
func GetCurrentUser(ctx context.Context) string {
	if currentUser, ok := ctx.Value("currentUser").(string); ok {
		return currentUser
	}
	return ""
}
