package templates

import (
	"fmt"
	"gorant/upload"
	"gorant/users"
)

templ UploadAdmin(title string, currentUser *users.User, files []upload.BucketFile) {
	@Base(title, currentUser) {
		<div class="grid w-full grid-cols-2">
			<div class="grid content-start gap-8 pt-8">
				<div id="nav-tab" role="tablist" class="tabs tabs-bordered">
					<a role="tab" class="tab tab-active" data-page="cloud">Cloud</a>
					<a role="tab" class="tab" data-page="local">Local</a>
				</div>
				<div class="tab-page grid content-center justify-items-center gap-8" data-page="cloud">
					<form
						class="grid w-full max-w-[30rem] gap-4 rounded-lg border border-neutral/30 bg-primary/5 p-4"
						hx-post="/upload/process"
						hx-swap="outerHTML"
						hx-target="#uploaded-preview"
						hx-encoding="multipart/form-data"
					>
						<div class="space-y-2">
							<label class="grid min-h-24 cursor-pointer content-center justify-items-center rounded-lg py-8 outline-dashed outline-2 outline-accent hover:bg-primary/30">
								<input type="file" name="upload" class="file-input file-input-bordered file-input-accent hidden w-full"/>
								<svg xmlns="http://www.w3.org/2000/svg" width="3rem" height="3rem" class="mdi:cloud-upload text-accent" viewBox="0 0 24 24">
									<path fill="currentColor" d="M11 20H6.5q-2.28 0-3.89-1.57Q1 16.85 1 14.58q0-1.95 1.17-3.48q1.18-1.53 3.08-1.95q.63-2.3 2.5-3.72Q9.63 4 12 4q2.93 0 4.96 2.04Q19 8.07 19 11q1.73.2 2.86 1.5q1.14 1.28 1.14 3q0 1.88-1.31 3.19T18.5 20H13v-7.15l1.6 1.55L16 13l-4-4l-4 4l1.4 1.4l1.6-1.55Z"></path>
								</svg>
								<div class="font-medium"><span class="font-bold text-accent">Bucket</span> upload</div>
							</label>
							<div class="text-sm text-neutral/70">Supported formats: .jpg, .png, .webp, .txt, .pdf, .docx</div>
						</div>
						<button class="btn btn-accent w-full">Upload to Cloud</button>
					</form>
					<div class="collapse border border-base-content/20 text-base-content/70">
						<input type="checkbox" checked="checked"/>
						<div class="collapse-title content-center px-4 py-1 text-sm">
							<div class="flex items-center">
								<div class="grow font-medium">Bucket Items</div>
								<div>
									<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" viewBox="0 0 24 24">
										<path fill="currentColor" d="m12 15.4l-6-6L7.4 8l4.6 4.6L16.6 8L18 9.4z"></path>
									</svg>
								</div>
							</div>
						</div>
						<div class="collapse-content space-y-2">
							<div class="text-xs">
								<div class="grid grid-cols-5">
									<div class="col-span-3 border border-neutral/70 bg-neutral p-2 text-neutral-content">Filename</div>
									<div class="border border-neutral/70 bg-neutral p-2 text-neutral-content">Last Modified</div>
									<div class="border border-neutral/70 bg-neutral p-2 text-neutral-content">Size (Kb)</div>
									for i := 0; i < len(files); i++ {
										<div class="col-span-3 break-words border border-neutral/70 p-2 underline"><a href={ templ.URL(fmt.Sprintf("/view/%s", files[i].Key)) }>{ files[i].Key }</a></div>
										<div class="border border-neutral/70 p-2">{ files[i].LastModifiedString() }</div>
										<div class="border border-neutral/70 p-2">{ files[i].SizeString() }</div>
									}
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="tab-page grid hidden w-full content-center justify-items-center gap-8" data-page="local">
					<form
						class="grid w-full max-w-[30rem] gap-4 rounded-lg border border-neutral/30 bg-primary/5 p-4"
						hx-post="/upload/test"
						hx-swap="outerHTML"
						hx-target="#uploaded-preview"
						hx-encoding="multipart/form-data"
					>
						<div class="space-y-2">
							<label class="grid min-h-24 cursor-pointer content-center justify-items-center rounded-lg py-8 outline-dashed outline-2 outline-accent hover:bg-primary/30">
								<input type="file" name="upload" class="file-input file-input-bordered file-input-accent hidden w-full"/>
								<svg xmlns="http://www.w3.org/2000/svg" width="3rem" height="3rem" class="material-symbols:upload-file text-accent" viewBox="0 0 24 24"><path fill="currentColor" d="M11 19h2v-4.175l1.6 1.6L16 15l-4-4l-4 4l1.425 1.4L11 14.825zm-5 3q-.825 0-1.412-.587T4 20V4q0-.825.588-1.412T6 2h8l6 6v12q0 .825-.587 1.413T18 22zm7-13h5l-5-5z"></path></svg>
								<div class="font-medium"><span class="font-bold text-accent">Local</span> upload</div>
							</label>
							<div class="text-sm text-neutral/70">Supported formats: .jpg, .png, .webp, .txt, .pdf, .docx</div>
						</div>
						<button class="btn btn-accent w-full">Upload to Disk</button>
					</form>
				</div>
			</div>
			<div class="grid content-center justify-center">
				<div id="uploaded-preview" class="grid justify-items-center text-2xl font-bold text-base-content/70">
					<div>
						<svg xmlns="http://www.w3.org/2000/svg" width="10rem" height="10rem" class="material-symbols:hide-image text-base-content/30" viewBox="0 0 24 24">
							<path fill="currentColor" d="M21 18.15L5.85 3H19q.825 0 1.413.588T21 5zm-1.2 4.45L18.2 21H5q-.825 0-1.412-.587T3 19V5.8L1.4 4.2l1.4-1.4l18.4 18.4zM6 17h8.175l-2.1-2.1l-.825 1.1L9 13z"></path>
						</svg>
					</div>
					<div>Nothing uploaded!</div>
				</div>
			</div>
		</div>
		<script src="/static/js/output/admin/upload.js"></script>
	}
}

templ SuccessfulUpload(url string) {
	<div id="uploaded-preview" class="p-8">
		<img src={ string(templ.URL(fmt.Sprintf("https://bucket.grumplr.com/%s", url))) } class="object-fit" alt="Uploaded image"/>
	</div>
}

templ SuccessfulTestUpload(url string) {
	<div id="uploaded-preview" class="p-8">
		<img src={ string(templ.URL(fmt.Sprintf("/static/uploads/%s", url))) } class="object-fit" alt="Uploaded image"/>
	</div>
}

templ ViewFile(domain string, fileID string) {
	<html>
		<head>
			<title>
				{ fileID }
			</title>
		</head>
		<body>
			<img src={ string(templ.URL(fmt.Sprintf("%s/%s", domain, fileID))) } alt="Image"/>
		</body>
	</html>
}

templ ViewOrphanFiles(title string, currentUser *users.User, files []upload.BucketFile) {
	@Base(title, currentUser) {
		<div class="grid content-center justify-items-center gap-8">
			<div id="toast"></div>
			<h1 class="text-2xl font-bold">{ title }</h1>
			<div class="grid grid-cols-5">
				<div class="col-span-3 border border-neutral/70 bg-neutral p-2 text-neutral-content">Filename</div>
				<div class="border border-neutral/70 bg-neutral p-2 text-neutral-content">Last Modified</div>
				<div class="border border-neutral/70 bg-neutral p-2 text-neutral-content">Size (Kb)</div>
				if len(files) > 0 {
					for i := 0; i < len(files); i++ {
						<div class="col-span-3 break-words border border-neutral/70 p-2 underline"><a href={ templ.URL(fmt.Sprintf("/view/%s", files[i].Key)) }>{ files[i].Key }</a></div>
						<div class="border border-neutral/70 p-2">{ files[i].LastModifiedString() }</div>
						<div class="border border-neutral/70 p-2">{ files[i].SizeString() }</div>
					}
				} else {
					<div class="col-span-5 w-full border border-neutral/70 p-2 text-center">No duplicate files!</div>
				}
			</div>
			<button
				hx-post="/upload/duplicates/delete"
				hx-swap="outerHTML"
				hx-target="#toast"
				class="btn btn-error w-full max-w-96 text-lg"
			>Delete</button>
		</div>
	}
}
