package templates

import (
	"fmt"
	"gorant/posts"
	"gorant/users"
)

templ PartialPostNewError(currentUser *users.User, comments []posts.Comment, messages map[string]string) {
	@PartialPostNew(currentUser, comments, "")
	if messages["content"] != "" {
		<div id="form-message-error" class="mt-1 flex items-center rounded-lg text-sm text-error" hx-swap-oob="true">
			<svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" class="me-1" viewBox="0 0 24 24"><path fill="currentColor" d="M12 17q.425 0 .713-.288T13 16t-.288-.712T12 15t-.712.288T11 16t.288.713T12 17m-1-4h2V7h-2zm1 9q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>{ messages["content"] }
			<script>
			(() => {
				let classes = ["border-2", "border-error", "focus:border","focus:outline-error", "focus:border-error"]
				document.getElementById("comment-form-message-input").classList.add(...classes)
			})()
		</script>
		</div>
	}
}

templ PartialPostNewSorted(currentUser *users.User, comments []posts.Comment, highlight string) {
	@PartialPostNew(currentUser, comments, highlight)
	@SortButton(currentUser, comments[0].PostID, "true")
}

templ PartialPostNewSuccess(currentUser *users.User, comments []posts.Comment, highlight string) {
	@PartialPostNew(currentUser, comments, highlight) {
		@Toast("success", "Comment added!")
	}
	@PostForm(currentUser, comments[0].PostID, "true")
}

templ PartialPostVote(currentUser *users.User, comments []posts.Comment, highlight string) {
	@PartialPostNew(currentUser, comments, highlight)
}

templ PartialPostNewErrorLogin(currentUser *users.User, comments []posts.Comment) {
	@PartialPostNew(currentUser, comments, "") {
		@Toast("error", "You need to be logged in to add a new comment!")
	}
}

templ PartialPostDelete(currentUser *users.User, comments []posts.Comment) {
	@PartialPostNew(currentUser, comments, "")
}

templ PartialPostErrorMessage(message string) {
	<h2 class="text-xl font-bold">Error!</h2>
	<div>
		{ message }
	</div>
}

templ PartialEditDescriptionResponse(currentUser *users.User, post posts.Post) {
	<div class="group flex items-center" id="post-description">
		if post.UserID == currentUser.UserID {
			<button id="post-description-static" class="flex flex-wrap items-center">
				if post.Description == "" {
					Add a description here
				} else {
					{ post.Description }
				}
				<svg id="" xmlns="http://www.w3.org/2000/svg" class="ms-4 hidden group-hover:flex" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path></svg>
			</button>
			<form
				id="post-description-form"
				class="join mt-2 hidden w-full"
				hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/description/edit", post.ID))) }
				hx-target="#post-description"
				hx-swap="outerHTML"
				hx-target-error="#toast"
			>
				<label class="input join-item input-bordered flex w-full max-w-xl items-center rounded-lg">
					<svg xmlns="http://www.w3.org/2000/svg" class="me-4 inline text-neutral/30" width="1.4em" height="1.4em" viewBox="0 0 24 24"><path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path></svg>
					<input
						type="text"
						id="post-description-input"
						name="post-description-input"
						class="grow"
						if post.Description == "" {
							placeholder="Add a description here"
						}
						value={ post.Description }
					/>
					<button type="button" id="post-description-cancel" class="text-accent">
						<svg xmlns="http://www.w3.org/2000/svg" width="1.4em" height="1.4em" viewBox="0 0 24 24"><path fill="currentColor" d="m8.4 17l3.6-3.6l3.6 3.6l1.4-1.4l-3.6-3.6L17 8.4L15.6 7L12 10.6L8.4 7L7 8.4l3.6 3.6L7 15.6zm3.6 5q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
					</button>
				</label>
				<button id="post-description-button" class="btn btn-accent join-item rounded-lg px-6">Save</button>
			</form>
		} else {
			if post.Description == "" {
				No description added
			} else {
				{ post.Description }
			}
		}
		<script>
			(function activateDescriptionForm() {
				document.getElementById("post-description-static").addEventListener("click", () => {
					const postDescriptionForm = document.getElementById("post-description-form")
					postDescriptionForm.classList.remove("hidden")
					const postDescriptionStatic = document.getElementById("post-description-static")
					postDescriptionStatic.classList.add("hidden")
				})

				document.getElementById("post-description-cancel").addEventListener("click", () => {
					const postDescriptionForm = document.getElementById("post-description-form")
					postDescriptionForm.classList.add("hidden")
					const postDescriptionStatic = document.getElementById("post-description-static")
					postDescriptionStatic.classList.remove("hidden")
				})
				
			})()
		</script>
	</div>
}

templ PartialEditMoodError(postID string, mood string) {
	<div id="mood" class="dropdown-start dropdown dropdown-bottom">
		<div tabindex="0" role="button" class="flex items-center text-5xl">
			if mood == "elated" {
				😄
			} else if mood == "happy" {
				🙂
			} else if mood == "sad" {
				☹️
			} else if mood == "upset" {
				😫
			} else if mood == "angry" {
				😡
			} else {
				😐
			}
			<svg xmlns="http://www.w3.org/2000/svg" width="0.5em" height="0.5em" viewBox="0 0 24 24"><path fill="currentColor" d="m12 15.4l-6-6L7.4 8l4.6 4.6L16.6 8L18 9.4z"></path></svg>
		</div>
		<ul tabindex="0" class="menu dropdown-content z-[1] w-auto bg-base-100 p-2 shadow">
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/elated", postID))) }
				><span class="me-2 inline text-xl">😄</span> Elated</button>
			</li>
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/happy", postID))) }
				><span class="me-2 inline text-xl">🙂</span> Happy</button>
			</li>
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/neutral", postID))) }
				><span class="me-2 inline text-xl">😐</span> Neutral</button>
			</li>
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/sad", postID))) }
				><span class="me-2 inline text-xl">☹️</span> Sad</button>
			</li>
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/upset", postID))) }
				><span class="me-2 inline text-xl">😫</span> Upset</button>
			</li>
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/angry", postID))) }
				><span class="me-2 inline text-xl">😡</span> Angry</button>
			</li>
		</ul>
		@Toast("error", "You need to be logged in!")
	</div>
}

templ PartialSettingsEditSuccess(s users.User) {
	<div id="settings-message" class="flex w-full items-center rounded-lg border border-success bg-success p-2 text-success-content shadow-lg">
		<h2 class="flex items-center">
			<svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="m10.6 16.6l7.05-7.05l-1.4-1.4l-5.65 5.65l-2.85-2.85l-1.4 1.4zM12 22q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
			Saved!
		</h2>
	</div>
	<div id="first-login-message" hx-swap-oob="true" class=""></div>
}

templ PartialCommentEdit(c posts.Comment, domain string) {
	<form
		id="comment-form"
		hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/edit", c.PostID, c.ID.String()))) }
		hx-target={ string(templ.URL(fmt.Sprintf("#post-%s-content", c.ID.String()))) }
		hx-swap="outerHTML"
		hx-trigger="keydown[key=='Enter'&&ctrlKey], click from:#comment-submit-button"
		hx-encoding="multipart/form-data"
		hx-target-error="#toast"
		class="w-full space-y-4"
	>
		<h2 class="text-xl font-bold text-base-content/70">Edit Comment</h2>
		<label class="form-control">
			<div id="form-message-label" class="label flex text-base-content/70">
				<div class="grow text-sm font-medium">Message</div>
				<div class="text-sm italic"><span id="form-message-chars"></span>/2000</div>
			</div>
			<div class="element" id="element"></div>
			<textarea
				name="message"
				id="comment-form-message-input"
				placeholder="Enter a message of at least 10 chars"
				class="textarea textarea-bordered hidden min-h-24 bg-white/70"
				minlength="10"
				maxlength="2000"
				rows="7"
				required
			></textarea>
			<button class="mt-1 flex grow items-center gap-2 text-xs text-base-content/70" type="button" onclick="keyboard_shortcuts_modal.showModal()">
				<svg xmlns="http://www.w3.org/2000/svg" width="1rem" height="1rem" class="material-symbols:keyboard-command-key" viewBox="0 0 24 24">
					<path fill="currentColor" d="M6.5 21q-1.45 0-2.475-1.025T3 17.5t1.025-2.475T6.5 14H8v-4H6.5q-1.45 0-2.475-1.025T3 6.5t1.025-2.475T6.5 3t2.475 1.025T10 6.5V8h4V6.5q0-1.45 1.025-2.475T17.5 3t2.475 1.025T21 6.5t-1.025 2.475T17.5 10H16v4h1.5q1.45 0 2.475 1.025T21 17.5t-1.025 2.475T17.5 21t-2.475-1.025T14 17.5V16h-4v1.5q0 1.45-1.025 2.475T6.5 21m0-2q.625 0 1.063-.437T8 17.5V16H6.5q-.625 0-1.062.438T5 17.5t.438 1.063T6.5 19m11 0q.625 0 1.063-.437T19 17.5t-.437-1.062T17.5 16H16v1.5q0 .625.438 1.063T17.5 19M10 14h4v-4h-4zM6.5 8H8V6.5q0-.625-.437-1.062T6.5 5t-1.062.438T5 6.5t.438 1.063T6.5 8M16 8h1.5q.625 0 1.063-.437T19 6.5t-.437-1.062T17.5 5t-1.062.438T16 6.5z"></path>
				</svg><span class="underline hover:text-accent">Keyboard Shortcuts</span>
			</button>
		</label>
		<input type="hidden" value={ c.Content } id="comment-form-existing-message"/>
		@TiptapMenu()
		<div class="collapse mt-4 rounded-lg border border-base-content/20 text-base-content/70">
			// DaisyUI applies a min-h of 3.75rem by default to checkbox and collapse-title, so classes in both are needed
			<input type="checkbox" class="min-h-10"/>
			<div class="collapse-title min-h-10 content-center px-4 py-1 text-sm">
				<div class="flex items-center">
					if c.NullFile.FileKey.String != "" {
						<div class="flex items-center text-sm text-base-content/70 hover:text-accent grow">
							<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="inline material-symbols:attachment me-2" viewBox="0 0 24 24">
								<path fill="currentColor" d="M8.25 18q-2.6 0-4.425-1.825T2 11.75t1.825-4.425T8.25 5.5h9.25q1.875 0 3.188 1.313T22 10t-1.312 3.188T17.5 14.5H8.75q-1.15 0-1.95-.8T6 11.75t.8-1.95T8.75 9H18v2H8.75q-.325 0-.537.213T8 11.75t.213.538t.537.212h8.75q1.05-.025 1.775-.737T20 10t-.725-1.775T17.5 7.5H8.25q-1.775-.025-3.012 1.225T4 11.75q0 1.75 1.238 2.975T8.25 16H18v2z"></path>
							</svg>
							<div class="truncate max-w-96">1 attachment</div>
						</div>
						<div>
							<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" viewBox="0 0 24 24">
								<path fill="currentColor" d="m12 15.4l-6-6L7.4 8l4.6 4.6L16.6 8L18 9.4z"></path>
							</svg>
						</div>
					} else {
						<div class="flex grow items-center gap-2 font-medium">
							<svg xmlns="http://www.w3.org/2000/svg" width="1.3rem" height="1.3rem" class="material-symbols:upload" viewBox="0 0 24 24">
								<path fill="currentColor" d="M11 16V7.85l-2.6 2.6L7 9l5-5l5 5l-1.4 1.45l-2.6-2.6V16zm-5 4q-.825 0-1.412-.587T4 18v-3h2v3h12v-3h2v3q0 .825-.587 1.413T18 20z"></path>
							</svg>Upload File
						</div>
					}
				</div>
			</div>
			<div class="collapse-content space-y-2">
				if c.NullFile.FileKey.String != "" {
					<div class="grid grid-cols-2 content-center py-2 text-base-content/70">
						<div class="flex justify-center placeholder-image-icon rounded-lg bg-gray-900">
							// <svg xmlns="http://www.w3.org/2000/svg" width="3rem" height="3rem" class="material-symbols:imagesmode-outline" viewBox="0 0 24 24">
							// 	<path fill="currentColor" d="M5 21q-.825 0-1.412-.587T3 19V5q0-.825.588-1.412T5 3h14q.825 0 1.413.588T21 5v14q0 .825-.587 1.413T19 21zm0-2h14V5H5zm1-2h12l-3.75-5l-3 4L9 13zm-1 2V5zm3.5-9q.625 0 1.063-.437T10 8.5t-.437-1.062T8.5 7t-1.062.438T7 8.5t.438 1.063T8.5 10"></path>
							// </svg>
							<a href={ templ.URL(fmt.Sprintf("/view/%s", c.NullFile.FileKey.String)) } target="_blank">
								<img src={ string(templ.URL(fmt.Sprintf("%s/%s", domain, c.NullFile.FileKey.String))) } alt="Uploaded image" class="w-24"/>
							</a>
						</div>
						<div class="px-4 text-sm grid content-start gap-2">
							<div class="text-xs">{ c.NullFile.FileKey.String }</div>
							<div class="flex gap-2 items-center">
								<a href={ templ.URL(fmt.Sprintf("/view/%s", c.NullFile.FileKey.String)) } class="min-w-20 btn btn-xs btn-accent btn-outline flex items-center gap-1" target="_blank">
									<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="radix-icons:open-in-new-window" viewBox="0 0 15 15">
										<path fill="currentColor" fill-rule="evenodd" d="M12 13a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v3.5a.5.5 0 0 0 1 0V3h9v9H8.5a.5.5 0 0 0 0 1zM9 6.5v3a.5.5 0 0 1-1 0V7.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 7H5.5a.5.5 0 0 1 0-1h3a.5.5 0 0 1 .5.497" clip-rule="evenodd"></path>
									</svg>View
								</a>
								<a class="min-w-20 btn btn-xs btn-error flex items-center gap-1">
									<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="text-error-content material-symbols:delete-outline" viewBox="0 0 24 24">
										<path fill="currentColor" d="M7 21q-.825 0-1.412-.587T5 19V6H4V4h5V3h6v1h5v2h-1v13q0 .825-.587 1.413T17 21zM17 6H7v13h10zM9 17h2V8H9zm4 0h2V8h-2zM7 6v13z"></path>
									</svg>
									Delete
								</a>
							</div>
						</div>
					</div>
				} else {
					<label class="grid min-h-14 cursor-pointer content-center justify-items-center rounded-lg py-4 outline-dashed outline-2 outline-base-content/30">
						<input id="comment-file-input" type="file" name="file" class="file-input file-input-bordered file-input-accent hidden w-full" accept="image/png, image/jpeg, image/webp, image/avif, image/gif, image/svg+xml"/>
						<svg xmlns="http://www.w3.org/2000/svg" width="2rem" height="2rem" class="material-symbols:upload-file" viewBox="0 0 24 24"><path fill="currentColor" d="M11 19h2v-4.175l1.6 1.6L16 15l-4-4l-4 4l1.425 1.4L11 14.825zm-5 3q-.825 0-1.412-.587T4 20V4q0-.825.588-1.412T6 2h8l6 6v12q0 .825-.587 1.413T18 22zm7-13h5l-5-5z"></path></svg>
						<div id="comment-file-message" class="break-all px-2 text-base font-medium"><b>Select a file</b> to upload</div>
					</label>
					<div class="text-xs">Allowed: .jpg, .gif, .png, .webp, .avif</div>
				}
			</div>
		</div>
		<div id="comment-form-error-message" class="text-sm text-error"></div>
		<div class="grid grid-cols-2 gap-4">
			<button id="comment-submit-button" class="btn btn-accent w-full rounded-lg">Edit Comment</button>
			<a href={ templ.URL(fmt.Sprintf("/posts/%s", c.PostID)) } id="comment-cancel-button" class="btn btn-outline btn-accent w-full rounded-lg">Cancel</a>
		</div>
	</form>
}

templ PartialCommentEditSuccess(c posts.Comment) {
	<div id={ "post-" + c.ID.String() + "-content" } class="post-content pt-4 text-base">
		// Previously used for <textarea> input
		// hyphenate whitespace-pre-line 
		@templ.Raw(c.Content)
	</div>
}
