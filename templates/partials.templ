package templates

import (
	"fmt"
	"gorant/posts"
)

templ PartialPostNew(comments []posts.JoinComment, postID string, username string, highlight string) {
	<article id="posts" class="w-full space-y-4 lg:col-span-2">
		if len(comments) > 0 {
			for i := 0; i < len(comments); i++ {
				if comments[i].RowID == highlight {
					<!-- animate-revertBorder is defined in tailwind config, adds orange border then removes it -->
					<div id={ comments[i].RowID } class="flex h-auto border-2 animate-revertBorder">
						<div class="grid w-20 content-center bg-primary/30 p-2 text-center text-xl font-bold">
							if comments[i].CurrentUserVoted == "true" {
								<button
									hx-target="#posts"
									hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/upvote", postID, comments[i].RowID))) }
									class="inline-block h-auto text-4xl text-orange-600"
								>
									<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="inline-block" viewBox="0 0 24 24"><path fill="currentColor" d="m7 14l5-5l5 5z"></path></svg>
								</button>
							} else {
								<button
									hx-target="#posts"
									hx-trigger="click"
									hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/upvote", postID, comments[i].RowID))) }
									class="inline-block h-auto text-4xl hover:text-orange-600 active:-translate-y-1"
								>
									<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="inline-block" viewBox="0 0 24 24"><path fill="currentColor" d="m7 14l5-5l5 5z"></path></svg>
								</button>
							}
							<div>
								if len(comments[i].CountString) > 0 {
									{ comments[i].CountString }
								} else {
									0
								}
							</div>
						</div>
						<div class="w-full grow bg-lime-300/10 p-4">
							<div class="flex border-b border-accent/20 pb-2 text-xl text-base-content/60">
								<div class="flex grow items-center font-bold">
									// <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="me-2 inline text-neutral/70" viewBox="0 0 24 24"><path fill="currentColor" d="M5.85 17.1q1.275-.975 2.85-1.537T12 15t3.3.563t2.85 1.537q.875-1.025 1.363-2.325T20 12q0-3.325-2.337-5.663T12 4T6.337 6.338T4 12q0 1.475.488 2.775T5.85 17.1M12 13q-1.475 0-2.488-1.012T8.5 9.5t1.013-2.488T12 6t2.488 1.013T15.5 9.5t-1.012 2.488T12 13m0 9q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
									<div class="me-2 w-10 rounded-full bg-neutral/70 text-center text-neutral-content">{ comments[i].Initials }</div>
									{ comments[i].UserID }
								</div>
								<div class="flex items-center text-base">
									(#{ comments[i].RowID }) { comments[i].CreatedAt }
								</div>
							</div>
							<div class="py-4 text-base">{ comments[i].Content }</div>
							if comments[i].UserID == username {
								<div class="flex justify-end pt-4">
									<button
										hx-target="#posts"
										hx-swap="outerHTML"
										hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/delete", postID, comments[i].RowID))) }
										class="-me-[1px] flex min-w-24 items-center justify-center border border-neutral/60 px-2 py-1 text-xs text-base-content/70 hover:bg-accent hover:text-error-content"
									>
										<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24"><path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path></svg>Edit
									</button>
									// <div class="dropdown dropdown-end dropdown-bottom">
									// 	<div tabindex="0" role="button" class="btn btn-sm flex items-center border border-neutral/60 bg-transparent text-neutral/60 hover:bg-neutral hover:text-neutral-content">
									// 		More Actions<svg xmlns="http://www.w3.org/2000/svg" class="" width="1.3em" height="1.3em" viewBox="0 0 24 24"><path fill="currentColor" d="m12 15.4l-6-6L7.4 8l4.6 4.6L16.6 8L18 9.4z"></path></svg>
									// 	</div>
									// 	<ul tabindex="0" class="menu dropdown-content z-[1] w-52 rounded-box bg-base-100 p-2 shadow">
									// 		<li>
									<button
										hx-target="#posts"
										hx-swap="outerHTML"
										hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/delete", postID, comments[i].RowID))) }
										class="flex min-w-24 items-center justify-center border border-neutral/60 px-2 py-1 text-xs text-base-content/70 hover:bg-error hover:text-error-content"
									>
										<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
											<path fill="currentColor" d="M9 17h2V8H9zm4 0h2V8h-2zm-8 4V6H4V4h5V3h6v1h5v2h-1v15z"></path>
										</svg>Delete
									</button>
									// 	</li>
									// </ul>
								</div>
							}
						</div>
					</div>
				} else {
					<div id={ comments[i].RowID } class="flex h-auto border border-neutral/30">
						<div class="grid w-20 content-center bg-primary/30 p-2 text-center text-xl font-bold">
							if comments[i].CurrentUserVoted == "true" {
								<button
									hx-target="#posts"
									hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/upvote", postID, comments[i].RowID))) }
									class="inline-block h-auto text-4xl text-orange-600"
								>
									<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="inline-block" viewBox="0 0 24 24"><path fill="currentColor" d="m7 14l5-5l5 5z"></path></svg>
								</button>
							} else {
								<button
									hx-target="#posts"
									hx-trigger="click"
									hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/upvote", postID, comments[i].RowID))) }
									class="inline-block h-auto text-4xl hover:text-orange-600 active:-translate-y-1"
								>
									<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="inline-block" viewBox="0 0 24 24"><path fill="currentColor" d="m7 14l5-5l5 5z"></path></svg>
								</button>
							}
							<div>
								if len(comments[i].CountString) > 0 {
									{ comments[i].CountString }
								} else {
									0
								}
							</div>
						</div>
						<div class="w-full grow bg-lime-300/10 p-4">
							<div class="flex border-b border-accent/20 pb-2 text-xl text-base-content/60">
								<div class="flex grow items-center font-bold">
									// <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="me-2 inline text-neutral/70" viewBox="0 0 24 24"><path fill="currentColor" d="M5.85 17.1q1.275-.975 2.85-1.537T12 15t3.3.563t2.85 1.537q.875-1.025 1.363-2.325T20 12q0-3.325-2.337-5.663T12 4T6.337 6.338T4 12q0 1.475.488 2.775T5.85 17.1M12 13q-1.475 0-2.488-1.012T8.5 9.5t1.013-2.488T12 6t2.488 1.013T15.5 9.5t-1.012 2.488T12 13m0 9q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
									<div class="me-2 w-10 rounded-full bg-neutral/70 text-center text-neutral-content">{ comments[i].Initials }</div>
									{ comments[i].UserID }
								</div>
								<div class="flex items-center text-base">
									(#{ comments[i].RowID }) { comments[i].CreatedAt }
								</div>
							</div>
							<div class="py-4 text-base">{ comments[i].Content }</div>
							if comments[i].UserID == username {
								<div class="flex justify-end pt-4">
									<button
										hx-target="#posts"
										hx-swap="outerHTML"
										hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/delete", postID, comments[i].RowID))) }
										class="-me-[1px] flex min-w-24 items-center justify-center border border-neutral/60 px-2 py-1 text-xs text-base-content/70 hover:bg-accent hover:text-error-content"
									>
										<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24"><path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path></svg>Edit
									</button>
									// <div class="dropdown dropdown-end dropdown-bottom">
									// 	<div tabindex="0" role="button" class="btn btn-sm flex items-center border border-neutral/60 bg-transparent text-neutral/60 hover:bg-neutral hover:text-neutral-content">
									// 		More Actions<svg xmlns="http://www.w3.org/2000/svg" class="" width="1.3em" height="1.3em" viewBox="0 0 24 24"><path fill="currentColor" d="m12 15.4l-6-6L7.4 8l4.6 4.6L16.6 8L18 9.4z"></path></svg>
									// 	</div>
									// 	<ul tabindex="0" class="menu dropdown-content z-[1] w-52 rounded-box bg-base-100 p-2 shadow">
									// 		<li>
									<button
										hx-target="#posts"
										hx-swap="outerHTML"
										hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/delete", postID, comments[i].RowID))) }
										class="flex min-w-24 items-center justify-center border border-neutral/60 px-2 py-1 text-xs text-base-content/70 hover:bg-error hover:text-error-content"
									>
										<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
											<path fill="currentColor" d="M9 17h2V8H9zm4 0h2V8h-2zm-8 4V6H4V4h5V3h6v1h5v2h-1v15z"></path>
										</svg>Delete
									</button>
									// 	</li>
									// </ul>
								</div>
							}
						</div>
					</div>
				}
			}
		}
		<!-- Children props are for Toasts -->
		{ children... }
	</article>
}

templ PartialPostNewError(comments []posts.JoinComment, postID string, username string, messages map[string]string) {
	@PartialPostNew(comments, postID, username, "")
	<div class="w-full" id="form-message" hx-swap-oob="true">
		<div class="grid w-full content-center space-y-2 border border-error p-2 pb-4 text-error">
			<h2 class="flex items-center text-xl font-bold">
				<svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="M12 17q.425 0 .713-.288T13 16t-.288-.712T12 15t-.712.288T11 16t.288.713T12 17m-1-4h2V7h-2zm1 9q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
				Error!
			</h2>
			<ul class="list-disc ps-6">
				// if messages["name"] != "" {
				// 	<li>{ messages["name"] }</li>
				// }
				if messages["content"] != "" {
					<li>{ messages["content"] }</li>
				}
			</ul>
		</div>
	</div>
	<div id="form-message-error" class="text-error" hx-swap-oob="true">{ messages["content"] }</div>
}

templ PartialPostNewSuccess(comments []posts.JoinComment, postID string, username string, highlight string) {
	@PartialPostNew(comments, postID, username, highlight)
	<div class="w-full pb-4" id="form-message" hx-swap-oob="true">
		<div class="flex w-full items-center border border-success p-2 text-success">
			<h2 class="flex items-center">
				<svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="m10.6 16.6l7.05-7.05l-1.4-1.4l-5.65 5.65l-2.85-2.85l-1.4 1.4zM12 22q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
				Successfully added!
			</h2>
		</div>
	</div>
}

templ PartialPostVote(comments []posts.JoinComment, postID string, username string, highlight string) {
	@PartialPostNew(comments, postID, username, highlight)
}

templ PartialPostVoteError(comments []posts.JoinComment, postID string, username string) {
	@PartialPostNew(comments, postID, username, "") {
		@Toast("error", "You need to be logged in to upvote!")
	}
}

templ PartialPostNewErrorLogin(comments []posts.JoinComment, postID string, username string) {
	@PartialPostNew(comments, postID, username, "") {
		@Toast("error", "You need to be logged in to add a new comment!")
	}
}

templ PartialPostDelete(comments []posts.JoinComment, postID string, username string) {
	@PartialPostNew(comments, postID, username, "")
}

templ PartialPostDeleteError(comments []posts.JoinComment, postID string, username string) {
	@PartialPostNew(comments, postID, username, "") {
		@Toast("error", "You can only delete comments you posted!")
	}
}

templ PartialPostErrorMessage(message string) {
	<h2 class="text-xl font-bold">Error!</h2>
	<div>
		{ message }
	</div>
}

templ PartialEditDescriptionInput(postID string, post posts.Post) {
	<div class="group flex items-center" id="post-description">
		<form class="join w-full" hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/description/edit", postID))) } hx-target="#post-description" hx-swap="outerHTML">
			if post.Description == "" {
				<input type="text" name="post-description-input" class="input join-item input-bordered w-full max-w-xl" value={ post.Description }/>
			} else {
				<input type="text" name="post-description-input" class="input join-item input-bordered w-full max-w-xl" value={ post.Description }/>
			}
			<button class="btn btn-accent join-item">Save</button>
		</form>
	</div>
}

templ PartialEditDescriptionResponse(postID string, post posts.Post) {
	<div class="group flex items-center" id="post-description">
		<button class="" hx-get={ string(templ.URL(fmt.Sprintf("/posts/%s/description/edit", postID))) } hx-target="#post-description" hx-swap="outerHTML">
			if post.Description == "" {
				Add a description here
			} else {
				{ post.Description }
			}
		</button>
		<svg xmlns="http://www.w3.org/2000/svg" class="ms-4 hidden group-hover:flex" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path></svg>
	</div>
}

templ PartialEditMoodError(postID string, mood string) {
	<div id="mood" class="dropdown dropdown-end dropdown-bottom">
		<div tabindex="0" role="button" class="flex items-center text-5xl">
			if mood == "elated" {
				😄
			} else if mood == "happy" {
				🙂
			} else if mood == "sad" {
				☹️
			} else if mood == "upset" {
				😫
			} else if mood == "angry" {
				😡
			} else {
				😐
			}
			<svg xmlns="http://www.w3.org/2000/svg" width="0.5em" height="0.5em" viewBox="0 0 24 24"><path fill="currentColor" d="m12 15.4l-6-6L7.4 8l4.6 4.6L16.6 8L18 9.4z"></path></svg>
		</div>
		<ul tabindex="0" class="menu dropdown-content z-[1] w-auto bg-base-100 p-2 shadow">
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/elated", postID))) }
				><span class="me-2 inline text-xl">😄</span> Elated</button>
			</li>
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/happy", postID))) }
				><span class="me-2 inline text-xl">🙂</span> Happy</button>
			</li>
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/neutral", postID))) }
				><span class="me-2 inline text-xl">😐</span> Neutral</button>
			</li>
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/sad", postID))) }
				><span class="me-2 inline text-xl">☹️</span> Sad</button>
			</li>
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/upset", postID))) }
				><span class="me-2 inline text-xl">😫</span> Upset</button>
			</li>
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/angry", postID))) }
				><span class="me-2 inline text-xl">😡</span> Angry</button>
			</li>
		</ul>
		@Toast("error", "You need to be logged in!")
	</div>
}
