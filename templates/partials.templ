package templates

import (
	"fmt"
	"gorant/posts"
	"gorant/users"
)

templ PartialPostNew(currentUser users.User, comments []posts.JoinComment, postID string, highlight string) {
	<article id="posts" class="w-full space-y-2" hx-ext="response-targets">
		if len(comments) > 0 {
			for i := 0; i < len(comments); i++ {
				<div
					id={ "post-" + comments[i].CommentID }
					if comments[i].CommentID == highlight {
						class="relative flex h-auto w-full animate-highlight-border rounded-lg border border-neutral/10 transition-all duration-1000"
					} else {
						class="relative flex h-auto w-full rounded-lg border border-neutral/10 transition-all duration-1000"
					}
				>
					<div id={ "post-delete-loader-" + comments[i].CommentID } class="absolute left-1/2 top-1/2 z-10 hidden w-full -translate-x-1/2 -translate-y-1/2 transform justify-center opacity-100"><span class="loading loading-spinner loading-md text-error"></span></div>
					<div
						id={ "post-upvote-" + comments[i].CommentID }
						if comments[i].CommentID == highlight {
							class="grid animate-highlight-comment-side content-center rounded-l-lg bg-primary/30 p-2 text-center text-xl font-bold lg:w-20"
						} else {
							class="grid content-center rounded-l-lg bg-primary/30 p-2 text-center text-xl font-bold lg:w-20"
						}
					>
						<button
							hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/upvote", postID, comments[i].CommentID))) }
							hx-target="#posts"
							hx-swap="outerHTML"
							hx-target-403="#toast"
							if comments[i].CurrentUserVoted == "true" {
								class="inline-block h-auto text-4xl text-orange-600"
							} else {
								class="inline-block h-auto text-4xl hover:text-orange-600 active:-translate-y-1"
							}
						>
							<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="inline-block" viewBox="0 0 24 24"><path fill="currentColor" d="m7 14l5-5l5 5z"></path></svg>
						</button>
						<div>
							if len(comments[i].CountString) > 0 {
								{ comments[i].CountString }
							} else {
								0
							}
						</div>
					</div>
					<div
						id={ "post-body-" + comments[i].CommentID }
						if comments[i].CommentID == highlight {
							class="w-full grow animate-highlight-comment-main rounded-r-lg bg-white/70 p-4"
						} else {
							class="w-full grow rounded-r-lg bg-white/70 p-4"
						}
					>
						<div class="flex">
							<div class="flex grow items-center">
								<div class="avatar me-4">
									<div class="w-16 rounded-full border border-neutral/20 bg-base-100">
										<img src={ string(templ.URL(comments[i].AvatarPath)) } alt="Avatar"/>
									</div>
								</div>
								<div>
									<div class="text-xl font-bold">{ comments[i].PreferredName }</div>
									<div class="text-xs text-base-content/60">{ comments[i].CreatedAtProcessed }</div>
								</div>
							</div>
							<div class="flex items-center text-base">
								if comments[i].UserID == currentUser.UserID {
									<div class="dropdown dropdown-end ms-8">
										<div tabindex="0" role="button" class="flex items-center justify-center rounded-lg text-neutral/70">
											<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" class="material-symbols-more-horiz inline-block h-6 w-6" viewBox="0 0 24 24"><path fill="currentColor" d="M6 14q-.825 0-1.412-.587T4 12t.588-1.412T6 10t1.413.588T8 12t-.587 1.413T6 14m6 0q-.825 0-1.412-.587T10 12t.588-1.412T12 10t1.413.588T14 12t-.587 1.413T12 14m6 0q-.825 0-1.412-.587T16 12t.588-1.412T18 10t1.413.588T20 12t-.587 1.413T18 14"></path></svg>
										</div>
										<ul tabindex="0" class="menu dropdown-content z-[1] w-52 rounded-box bg-white/70 p-2 shadow-lg backdrop-blur-[40px]">
											<li
												hx-target={ string(templ.URL(fmt.Sprintf("#post-%s-content", comments[i].CommentID))) }
												hx-swap="outerHTML"
												hx-get={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/edit", postID, comments[i].CommentID))) }
												class="flex rounded-md hover:bg-accent hover:text-accent-content focus:text-accent-content active:text-accent-content"
											>
												<button class="flex">
													<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
														<path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path>
													</svg>Edit comment
												</button>
											</li>
											<li
												data-parent-comment-id={ comments[i].CommentID }
												hx-target="#posts"
												hx-trigger="click"
												hx-swap="outerHTML swap:1.2s"
												hx-target-403="#toast"
												hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/delete", postID, comments[i].CommentID))) }
												class="delete-button rounded-md text-error hover:bg-error hover:text-error-content focus:text-error-content active:text-error-content"
											>
												<button class="flex">
													<svg xmlns="http://www.w3.org/2000/svg" class="me-2 inline" width="1.3em" height="1.3em" viewBox="0 0 24 24">
														<path fill="currentColor" d="M9 17h2V8H9zm4 0h2V8h-2zm-8 4V6H4V4h5V3h6v1h5v2h-1v15z"></path>
													</svg>Delete comment
												</button>
											</li>
										</ul>
									</div>
								}
							</div>
						</div>
						<div id={ "post-" + comments[i].CommentID + "-content" } class="hyphenate whitespace-pre-line pt-4 text-base">{ comments[i].Content }</div>
					</div>
				</div>
			}
		} else {
			<div class="grid place-items-center gap-4 rounded-lg p-8">
				<img src="/static/images/noun-empty-wallet-6118188.svg" width="234px" height="275px" class="" alt="Nothing!"/>
				<h2 class="text-center text-2xl font-extrabold">No comments</h2>
				<h2 class="text-center">Start by posting a comment!</h2>
			</div>
		}
		<script src="/static/js/post-partial.js"></script>
		<!-- Children props are for Toasts -->
		{ children... }
	</article>
}

templ PartialPostNewError(currentUser users.User, comments []posts.JoinComment, postID string, messages map[string]string) {
	@PartialPostNew(currentUser, comments, postID, "")
	if messages["content"] != "" {
		<div id="form-message-error" class="mt-1 flex items-center rounded-lg text-sm text-error" hx-swap-oob="true">
			<svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" class="me-1" viewBox="0 0 24 24"><path fill="currentColor" d="M12 17q.425 0 .713-.288T13 16t-.288-.712T12 15t-.712.288T11 16t.288.713T12 17m-1-4h2V7h-2zm1 9q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>{ messages["content"] }
			<script>
			(() => {
				let classes = ["border-2", "border-error", "focus:border","focus:outline-error", "focus:border-error"]
				document.getElementById("comment-form-message-input").classList.add(...classes)
			})()
		</script>
		</div>
	}
}

templ PartialPostNewSorted(currentUser users.User, comments []posts.JoinComment, postID string, highlight string) {
	@PartialPostNew(currentUser, comments, postID, highlight)
	@SortButton(currentUser, postID, "true")
}

templ PartialPostNewSuccess(currentUser users.User, comments []posts.JoinComment, postID string, highlight string) {
	@PartialPostNew(currentUser, comments, postID, highlight) {
		@Toast("success", "Comment added!")
	}
	@PostForm(currentUser, postID, "true")
}

templ PartialPostVote(currentUser users.User, comments []posts.JoinComment, postID string, highlight string) {
	@PartialPostNew(currentUser, comments, postID, highlight)
}

templ PartialPostNewErrorLogin(currentUser users.User, comments []posts.JoinComment, postID string) {
	@PartialPostNew(currentUser, comments, postID, "") {
		@Toast("error", "You need to be logged in to add a new comment!")
	}
}

templ PartialPostDelete(currentUser users.User, comments []posts.JoinComment, postID string) {
	@PartialPostNew(currentUser, comments, postID, "")
}

templ PartialPostErrorMessage(message string) {
	<h2 class="text-xl font-bold">Error!</h2>
	<div>
		{ message }
	</div>
}

templ PartialEditDescriptionResponse(currentUser users.User, postID string, post posts.JoinPost) {
	<div class="group flex items-center" id="post-description">
		if post.UserID == currentUser.UserID {
			<button id="post-description-static" class="flex flex-wrap items-center">
				if post.Description == "" {
					Add a description here
				} else {
					{ post.Description }
				}
				<svg id="" xmlns="http://www.w3.org/2000/svg" class="ms-4 hidden group-hover:flex" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path></svg>
			</button>
			<form
				id="post-description-form"
				class="join mt-2 hidden w-full"
				hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/description/edit", postID))) }
				hx-target="#post-description"
				hx-swap="outerHTML"
				hx-target-error="#toast"
			>
				<label class="input join-item input-bordered flex w-full max-w-xl items-center rounded-lg">
					<svg xmlns="http://www.w3.org/2000/svg" class="me-4 inline text-neutral/30" width="1.4em" height="1.4em" viewBox="0 0 24 24"><path fill="currentColor" d="M3 21v-4.25L16.2 3.575q.3-.275.663-.425t.762-.15t.775.15t.65.45L20.425 5q.3.275.438.65T21 6.4q0 .4-.137.763t-.438.662L7.25 21zM17.6 7.8L19 6.4L17.6 5l-1.4 1.4z"></path></svg>
					<input
						type="text"
						id="post-description-input"
						name="post-description-input"
						class="grow"
						if post.Description == "" {
							placeholder="Add a description here"
						}
						value={ post.Description }
					/>
					<button type="button" id="post-description-cancel" class="text-accent">
						<svg xmlns="http://www.w3.org/2000/svg" width="1.4em" height="1.4em" viewBox="0 0 24 24"><path fill="currentColor" d="m8.4 17l3.6-3.6l3.6 3.6l1.4-1.4l-3.6-3.6L17 8.4L15.6 7L12 10.6L8.4 7L7 8.4l3.6 3.6L7 15.6zm3.6 5q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
					</button>
				</label>
				<button id="post-description-button" class="btn btn-accent join-item rounded-lg px-6">Save</button>
			</form>
		} else {
			if post.Description == "" {
				No description added
			} else {
				{ post.Description }
			}
		}
		<script>
			(function activateDescriptionForm() {
				document.getElementById("post-description-static").addEventListener("click", () => {
					const postDescriptionForm = document.getElementById("post-description-form")
					postDescriptionForm.classList.remove("hidden")
					const postDescriptionStatic = document.getElementById("post-description-static")
					postDescriptionStatic.classList.add("hidden")
				})

				document.getElementById("post-description-cancel").addEventListener("click", () => {
					const postDescriptionForm = document.getElementById("post-description-form")
					postDescriptionForm.classList.add("hidden")
					const postDescriptionStatic = document.getElementById("post-description-static")
					postDescriptionStatic.classList.remove("hidden")
				})
				
			})()
		</script>
	</div>
}

templ PartialEditMoodError(postID string, mood string) {
	<div id="mood" class="dropdown-start dropdown dropdown-bottom">
		<div tabindex="0" role="button" class="flex items-center text-5xl">
			if mood == "elated" {
				😄
			} else if mood == "happy" {
				🙂
			} else if mood == "sad" {
				☹️
			} else if mood == "upset" {
				😫
			} else if mood == "angry" {
				😡
			} else {
				😐
			}
			<svg xmlns="http://www.w3.org/2000/svg" width="0.5em" height="0.5em" viewBox="0 0 24 24"><path fill="currentColor" d="m12 15.4l-6-6L7.4 8l4.6 4.6L16.6 8L18 9.4z"></path></svg>
		</div>
		<ul tabindex="0" class="menu dropdown-content z-[1] w-auto bg-base-100 p-2 shadow">
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/elated", postID))) }
				><span class="me-2 inline text-xl">😄</span> Elated</button>
			</li>
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/happy", postID))) }
				><span class="me-2 inline text-xl">🙂</span> Happy</button>
			</li>
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/neutral", postID))) }
				><span class="me-2 inline text-xl">😐</span> Neutral</button>
			</li>
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/sad", postID))) }
				><span class="me-2 inline text-xl">☹️</span> Sad</button>
			</li>
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/upset", postID))) }
				><span class="me-2 inline text-xl">😫</span> Upset</button>
			</li>
			<li class="text-base font-normal">
				<button
					hx-target="#mood"
					hx-swap="outerHTML"
					hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/mood/edit/angry", postID))) }
				><span class="me-2 inline text-xl">😡</span> Angry</button>
			</li>
		</ul>
		@Toast("error", "You need to be logged in!")
	</div>
}

templ PartialSettingsEditSuccess(s users.User) {
	<div id="settings-message" class="flex w-full items-center rounded-lg border border-success bg-success p-2 text-success-content shadow-lg">
		<h2 class="flex items-center">
			<svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="m10.6 16.6l7.05-7.05l-1.4-1.4l-5.65 5.65l-2.85-2.85l-1.4 1.4zM12 22q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
			Saved!
		</h2>
	</div>
	<div id="first-login-message" hx-swap-oob="true" class=""></div>
}

templ PartialCommentEdit(c posts.Comment) {
	<form
		id={ "post-" + c.CommentID + "-content" }
		class="py-4"
		hx-post={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/edit", c.PostID, c.CommentID))) }
		hx-target={ string(templ.URL(fmt.Sprintf("#post-%s-content", c.CommentID))) }
		hx-swap="outerHTML"
	>
		<textarea name="edit-content" class="textarea textarea-bordered h-36 w-full grow text-base" minlength="1" maxlength="2000" required>{ c.Content }</textarea>
		<div>
			<button class="btn btn-accent btn-sm min-w-24 rounded-lg">Save</button>
			<button
				type="button"
				class="btn btn-outline btn-accent btn-sm min-w-24 rounded-lg"
				hx-get={ string(templ.URL(fmt.Sprintf("/posts/%s/comment/%s/edit/cancel", c.PostID, c.CommentID))) }
				hx-target={ string(templ.URL(fmt.Sprintf("#post-%s-content", c.CommentID))) }
				hx-swap="outerHTML"
			>Cancel</button>
		</div>
	</form>
}

templ PartialCommentEditSuccess(c posts.Comment) {
	<div id={ "post-" + c.CommentID + "-content" } class="whitespace-pre-line py-4 text-base">{ c.Content }</div>
}
