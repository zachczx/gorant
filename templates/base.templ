package templates

import (
	"fmt"
	"gorant/posts"
)

templ Base(title string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<meta description="GoRant: Go starter kit"/>
			<meta name="htmx-config" content='{"includeIndicatorStyles": false}'/>
			<title>{ title }</title>
			<link href="/static/css/output/styles.css" rel="stylesheet"/>
			<script src="/static/js/ext/htmx.min.js"></script>
		</head>
		<body class="grid min-h-[100dvh] grid-rows-[auto_1fr_auto] font-sans">
			<header id="navbar" class="navbar border-b border-b-neutral/20 bg-primary/30 p-0">
				<div class="navbar-start">
					<div class="dropdown">
						<div tabindex="0" role="button" class="btn btn-ghost lg:hidden">
							<svg
								xmlns="http://www.w3.org/2000/svg"
								class="h-5 w-5"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M4 6h16M4 12h8m-8 6h16"
								></path>
							</svg>
						</div>
						<ul
							tabindex="-1"
							class="menu dropdown-content menu-sm z-[1] mt-3 w-52 rounded-box bg-base-100 p-2 opacity-0 shadow"
						>
							<li>
								<a>Posts</a>
								<ul class="p-2"></ul>
							</li>
							<li><a>Contact</a></li>
							<li><a href="/about">About</a></li>
						</ul>
					</div>
					<a href="/" class="group py-2 ps-6 text-3xl">
						<span class="inline-block rounded-full bg-accent p-2 font-medium text-accent-content transition-all duration-200 group-hover:bg-orange-700">Go</span><span class="inline-block rounded py-2 pe-4 ps-2 font-bold text-accent transition-all duration-500 ease-in-out group-hover:text-orange-500">Rant</span>
					</a>
				</div>
				<div class="navbar-center hidden lg:flex">
					<ul class="menu menu-horizontal px-1 opacity-0">
						<li>
							<details>
								<summary>Posts</summary>
								<ul class="p-2"></ul>
							</details>
						</li>
						<li><a>Contact</a></li>
						<li><a href="/about">About</a></li>
					</ul>
				</div>
				<div class="navbar-end pe-6">
					if GetCurrentUser(ctx)  == "" {
						<div>
							<a href="/login" class="btn btn-accent btn-sm me-2">Register</a>
							<a href="/login" class="btn btn-outline btn-accent btn-sm me-2">Login</a>
						</div>
					}
					if GetCurrentUser(ctx)  != "" {
						<div class="flex items-center">
							<div class="dropdown dropdown-end dropdown-bottom">
								<div tabindex="0" role="button" class="m-1">
									<button class="flex items-center rounded text-xs font-medium">
										<span class="btn btn-outline btn-xs me-2">{ GetCurrentUser(ctx) }</span>
										<div class="avatar">
											<div class="w-10 rounded-full border border-neutral/20 bg-base-100">
												<img src={ string(templ.URL(GetAvatarPath(ctx))) } alt=""/>
											</div>
										</div>
									</button>
								</div>
								<ul tabindex="0" class="menu dropdown-content z-[1] w-52 rounded-box border border-neutral/30 bg-base-100 p-2 shadow-lg">
									<li class="flex rounded-md hover:bg-accent hover:text-accent-content"><a href="/settings"><svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="M14.5 23q-.625 0-1.062-.437T13 21.5v-7q0-.625.438-1.062T14.5 13h7q.625 0 1.063.438T23 14.5v7q0 .625-.437 1.063T21.5 23zm-5.25-1l-.4-3.2q-.325-.125-.612-.3t-.563-.375L4.7 19.375l-2.75-4.75l2.575-1.95Q4.5 12.5 4.5 12.338v-.675q0-.163.025-.338L1.95 9.375l2.75-4.75l2.975 1.25q.275-.2.575-.375t.6-.3l.4-3.2h5.5l.4 3.2q.325.125.613.3t.562.375l2.975-1.25l2.75 4.75L19.925 11H15.4q-.35-1.075-1.25-1.787t-2.1-.713q-1.45 0-2.475 1.025T8.55 12q0 1.2.675 2.1T11 15.35V22zM15 21h6v-.825q-.625-.575-1.4-.875T18 19t-1.6.3t-1.4.875zm3-3q.625 0 1.063-.437T19.5 16.5t-.437-1.062T18 15t-1.062.438T16.5 16.5t.438 1.063T18 18"></path></svg>Settings</a></li>
									<li class="flex rounded-md hover:bg-accent hover:text-accent-content"><a href="/logout"><svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="M5 21q-.825 0-1.412-.587T3 19V5q0-.825.588-1.412T5 3h7v2H5v14h7v2zm11-4l-1.375-1.45l2.55-2.55H9v-2h8.175l-2.55-2.55L16 7l5 5z"></path></svg>Logout</a></li>
								</ul>
							</div>
						</div>
					}
				</div>
			</header>
			<div id="container" class="grid justify-items-center px-4 pt-10">
				{ children... }
			</div>
			<footer id="footer" class="mt-16 text-center text-sm">
				<p>Copyright ¬© 2024 Zixian Chen. All rights reserved.</p>
				<div>
					<a href="https://zixianchen.com/projects" class="underline">Portfolio</a> | <a href="https://zixianchen.com/contact/" class="underline">Feedback</a> | <button id="credit-modal" class="underline" onclick="credit_modal.showModal()">Credits</button>
				</div>
			</footer>
			<dialog id="credit_modal" class="modal">
				<div class="modal-box p-8">
					<h2 class="pb-6 text-4xl font-bold">Credits</h2>
					<h3 class="font-bold">SVGs</h3>
					<ul class="list-disc">
						<li class="ms-6">Happy sad by Ahmad Arzaha from <a href="https://thenounproject.com/browse/icons/term/happy-sad/" class="underline" target="_blank" title="Happy sad Icons">Noun Project</a> (CC BY 3.0)</li>
						<li class="ms-6">empty wallet by Amethyst Studio from <a href="https://thenounproject.com/browse/icons/term/empty-wallet/" class="underline" target="_blank" title="empty wallet Icons">Noun Project</a> (CC BY 3.0)</li>
					</ul>
					<div class="modal-action w-full">
						<form method="dialog" class="w-full">
							<button class="btn btn-accent mt-4 w-full">Close</button>
						</form>
					</div>
				</div>
			</dialog>
		</body>
	</html>
}

templ About() {
	@Base("About") {
		<h1>About</h1>
	}
}

templ StarterWelcome(posts []posts.JoinPost) {
	@Base("GoRant") {
		<div class="grid w-full justify-items-center">
			<h1 id="logo" class="mb-4 mt-8 flex items-center text-5xl font-extrabold">
				// @HappySadSvg()
				@Watermelon()
			</h1>
			<form method="post" id="post-form" action="/posts" class="join flex w-full justify-center lg:pt-0">
				<label class="max-w-11/12 input input-lg join-item input-bordered input-accent flex w-[40rem] items-center rounded-3xl bg-primary/10 text-base-content shadow-lg focus:shadow-lg focus:outline-none active:border-2 active:shadow-lg">
					// <svg xmlns="http://www.w3.org/2000/svg" width="1.6em" height="1.6em" class="me-4 text-accent" viewBox="0 0 24 24"><path fill="currentColor" d="M9.5 16q-2.725 0-4.612-1.888T3 9.5t1.888-4.612T9.5 3t4.613 1.888T16 9.5q0 1.1-.35 2.075T14.7 13.3l5.6 5.6q.275.275.275.7t-.275.7t-.7.275t-.7-.275l-5.6-5.6q-.75.6-1.725.95T9.5 16m0-2q1.875 0 3.188-1.312T14 9.5t-1.312-3.187T9.5 5T6.313 6.313T5 9.5t1.313 3.188T9.5 14"></path></svg>
					<svg xmlns="http://www.w3.org/2000/svg" width="1.6em" height="1.6em" class="me-4 text-gray-400" viewBox="0 0 24 24"><path fill="currentColor" d="M11 13H5v-2h6V5h2v6h6v2h-6v6h-2z"></path></svg>
					<input type="text" id="post-title" name="post-title" placeholder="Enter a post ID to continue" class="grow" autocomplete="off" required/>
				</label>
				<button id="post-button" class="btn btn-accent join-item btn-lg min-w-20 rounded-3xl text-xl shadow-lg">Create</button>
			</form>
			<div id="post-form-message" class="mt-2 text-sm text-error">
				{ children... }
			</div>
		</div>
		<div id="content" class="w-full max-w-[1000px] space-y-8 lg:pt-16">
			<div class="flex items-center">
				<h2 class="grow text-3xl font-bold">Posts</h2>
				// if GetCurrentUser(ctx) == "" {
				// 	<a href="/login?r=new" id="add-new-login-first" class="btn btn-accent rounded-3xl">
				// 		<h3 id="add-new-header" class="text-lg font-bold">New Post</h3>
				// 	</a>
				// } else {
				// 	<button id="add-new" class="btn btn-accent rounded-lg px-6 text-lg">
				// 		<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="me-2 inline" viewBox="0 0 24 24"><path fill="currentColor" d="M7 9h8V7H7zm0 4h5v-2H7zm10 7v-3h-3v-2h3v-3h2v3h3v2h-3v3zM3 20V5q0-.825.588-1.412T5 3h12q.825 0 1.413.588T19 5v5.075q-.25-.05-.5-.062T18 10q-2.525 0-4.262 1.75T12 16q0 .25.013.5t.062.5H6z"></path></svg>New Topic
				// 	</button>
				// }
			</div>
			<div id="posts" class="grid gap-4">
				for i := 0; i < len(posts); i++ {
					<a href={ templ.URL(fmt.Sprintf("/posts/%s", posts[i].PostID)) } class="flex overflow-hidden rounded-lg border border-neutral/15 bg-primary/10 p-2 transition-all duration-200 ease-out hover:border-secondary hover:ring-2 hover:ring-accent/50 hover:ring-offset-2">
						<div class="group grid place-items-center overflow-hidden rounded-xl border border-neutral/5 bg-black/5 text-center text-5xl">
							<span class="inline-block transition-all delay-500 group-hover:animate-wiggle">
								if posts[i].Mood  == "elated" {
									üòÑ
								} else if posts[i].Mood  == "happy" {
									üôÇ
								} else if posts[i].Mood  == "sad" {
									‚òπÔ∏è
								} else if posts[i].Mood  == "upset" {
									üò´
								} else if posts[i].Mood  == "angry" {
									üò°
								} else {
									üòê
								}
							</span>
						</div>
						<div class="grow pe-4 ps-6">
							<h3 class="truncate text-xl font-bold">
								{ posts[i].PostID }
							</h3>
							<div class="flex items-center">
								<div class="grow text-lg">by { posts[i].PreferredName }</div>
								<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="me-8 text-error/60" viewBox="0 0 24 24"><path fill="currentColor" d="M12 20.325q-.35 0-.712-.125t-.638-.4l-1.725-1.575q-2.65-2.425-4.788-4.812T2 8.15Q2 5.8 3.575 4.225T7.5 2.65q1.325 0 2.5.562t2 1.538q.825-.975 2-1.537t2.5-.563q2.35 0 3.925 1.575T22 8.15q0 2.875-2.125 5.275T15.05 18.25l-1.7 1.55q-.275.275-.637.4t-.713.125"></path></svg>
								<svg xmlns="http://www.w3.org/2000/svg" width="1.3em" height="1.3em" class="me-1 text-neutral/60" viewBox="0 0 24 24"><path fill="currentColor" d="M2 22V4q0-.825.588-1.412T4 2h16q.825 0 1.413.588T22 4v12q0 .825-.587 1.413T20 18H6zm4-8h8v-2H6zm0-3h12V9H6zm0-3h12V6H6z"></path></svg>{ posts[i].CommentsCountString }
							</div>
						</div>
					</a>
				}
			</div>
		</div>
		<script src="/static/js/output/index.js"></script>
	}
}

templ StarterWelcomeError(posts []posts.JoinPost) {
	@StarterWelcome(posts) {
		No special characters allowed! ID may contain only A-Z, a-z, 0-9, dash, underscore.
	}
}

templ Error(message string) {
	@Base("GoRant") {
		<main class="grid place-items-center content-center">
			<h1 class="text-5xl font-extrabold">GO. RANT.</h1>
			<img src="/static/images/reshot-illustration-404-page-HASGL2MQBU.svg" alt="Error" class="py-10"/>
			<p class="text-2xl">{ message }</p>
		</main>
	}
}

templ Toast(status string, message string) {
	if status == "error" {
		<div id="toast" class="toast toast-end animate-slide-up-down text-base font-normal">
			<div class="alert alert-info rounded-lg bg-error">
				<span class="flex items-center text-error-content">
					<svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="M12 17q.425 0 .713-.288T13 16t-.288-.712T12 15t-.712.288T11 16t.288.713T12 17m-1-4h2V7h-2zm1 9q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
					{ message }
				</span>
			</div>
		</div>
	} else if status == "success" {
		<div id="toast" class="toast toast-end animate-slide-up-down text-base font-normal">
			<div class="alert alert-info rounded-lg bg-success">
				<div class="flex items-center text-success-content">
					<svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" class="me-2" viewBox="0 0 24 24"><path fill="currentColor" d="m10.6 16.6l7.05-7.05l-1.4-1.4l-5.65 5.65l-2.85-2.85l-1.4 1.4zM12 22q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
					<span>{ message }</span>
				</div>
			</div>
		</div>
	}
	<script>
		(function removeToast() {
		const toastEl = document.getElementById("toast")
		setTimeout(() => {
			toastEl.remove()
			console.log("Triggered")			
		}, 5000)
		})()
	</script>
}
